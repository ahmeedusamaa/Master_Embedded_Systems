
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d88  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000eb8  08000eb8  00010eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ed8  08000ed8  00010ee0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ed8  08000ed8  00010ee0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ed8  08000ee0  00010ee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed8  08000ed8  00010ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000edc  08000edc  00010edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000ee0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000ee0  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ee0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000516f  00000000  00000000  00010f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bed  00000000  00000000  00016078  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d10  00000000  00000000  00016c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  00017978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00017ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002d2d  00000000  00000000  00017d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002719  00000000  00000000  0001aa8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000bd9b  00000000  00000000  0001d1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00028f41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006d4  00000000  00000000  00028fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ea0 	.word	0x08000ea0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ea0 	.word	0x08000ea0

08000170 <clock_init>:
#include "keypad_driver.h"
#include "Stm32_F103C6_SPI_driver.h"


void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// TO ENABLE CLOCK SIGNAL FOR GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	// TO ENABLE CLOCK SIGNAL FOR GPIOB
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <UART_IRQ_Callback>:

unsigned char ch;

void UART_IRQ_Callback(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
#ifdef MCU_Act_As_Master

	MCAL_UART_ReceiveData(USART1, &ch, disable);
 80001a8:	2201      	movs	r2, #1
 80001aa:	490d      	ldr	r1, [pc, #52]	; (80001e0 <UART_IRQ_Callback+0x3c>)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <UART_IRQ_Callback+0x40>)
 80001ae:	f000 fda5 	bl	8000cfc <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 80001b2:	2200      	movs	r2, #0
 80001b4:	490a      	ldr	r1, [pc, #40]	; (80001e0 <UART_IRQ_Callback+0x3c>)
 80001b6:	480b      	ldr	r0, [pc, #44]	; (80001e4 <UART_IRQ_Callback+0x40>)
 80001b8:	f000 fd84 	bl	8000cc4 <MCAL_UART_SendData>
	//Send to SPI
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80001bc:	2200      	movs	r2, #0
 80001be:	2110      	movs	r1, #16
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <UART_IRQ_Callback+0x44>)
 80001c2:	f000 fa8b 	bl	80006dc <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &ch, PollingEnable);
 80001c6:	2200      	movs	r2, #0
 80001c8:	4905      	ldr	r1, [pc, #20]	; (80001e0 <UART_IRQ_Callback+0x3c>)
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <UART_IRQ_Callback+0x48>)
 80001cc:	f000 fb8a 	bl	80008e4 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2110      	movs	r1, #16
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <UART_IRQ_Callback+0x44>)
 80001d6:	f000 fa81 	bl	80006dc <MCAL_GPIO_WritePin>

#endif

}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000028 	.word	0x20000028
 80001e4:	40013800 	.word	0x40013800
 80001e8:	40010800 	.word	0x40010800
 80001ec:	40013000 	.word	0x40013000

080001f0 <main>:

int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08c      	sub	sp, #48	; 0x30
 80001f4:	af00      	add	r7, sp, #0
	UART_Config UART_Config;

	clock_init();
 80001f6:	f7ff ffbb 	bl	8000170 <clock_init>
	UART_Config.BaudRate= UART_BaudRate_115200;
 80001fa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001fe:	623b      	str	r3, [r7, #32]
	UART_Config.FlowCtl=UART_FlowCtl_NONE;
 8000200:	2300      	movs	r3, #0
 8000202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	UART_Config.IRQ_Enable=UART_IRQ_Enable_RXNIE;
 8000206:	2320      	movs	r3, #32
 8000208:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	UART_Config.P_IRQ_CallBack = UART_IRQ_Callback;
 800020c:	4b21      	ldr	r3, [pc, #132]	; (8000294 <main+0xa4>)
 800020e:	62fb      	str	r3, [r7, #44]	; 0x2c
	UART_Config.Parity=UART_Parity_NONE;
 8000210:	2300      	movs	r3, #0
 8000212:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	UART_Config.payload_Length=UART_payloadLength_8B;
 8000216:	2300      	movs	r3, #0
 8000218:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	UART_Config.StopBits=UART_StopBits_1;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	UART_Config.USART_Mode=UART_Mode_TX_Rx;
 8000222:	230c      	movs	r3, #12
 8000224:	773b      	strb	r3, [r7, #28]

	MCAL_UART_Init(USART1, &UART_Config);
 8000226:	f107 031c 	add.w	r3, r7, #28
 800022a:	4619      	mov	r1, r3
 800022c:	481a      	ldr	r0, [pc, #104]	; (8000298 <main+0xa8>)
 800022e:	f000 fc93 	bl	8000b58 <MCAL_UART_Init>
	MCAL_UART_SetPins(USART1);
 8000232:	4819      	ldr	r0, [pc, #100]	; (8000298 <main+0xa8>)
 8000234:	f000 fd8e 	bl	8000d54 <MCAL_UART_SetPins>

	SPI_Config SPI_Config;
	SPI_Config.ClkPhase=SPI_ClkPhase_Second_Edge;
 8000238:	2301      	movs	r3, #1
 800023a:	81fb      	strh	r3, [r7, #14]
	SPI_Config.ClkPolarity=SPI_ClkPolarity_HighIDLE;
 800023c:	2302      	movs	r3, #2
 800023e:	81bb      	strh	r3, [r7, #12]
	SPI_Config.DataSize=SPI_DataSize_8Bit;
 8000240:	2300      	movs	r3, #0
 8000242:	817b      	strh	r3, [r7, #10]
	SPI_Config.FrameFormat=SPI_FrameFormat_MSB_First;
 8000244:	2300      	movs	r3, #0
 8000246:	813b      	strh	r3, [r7, #8]
	SPI_Config.SPI_Prescaler = SPI_Prescaler_8;            //assume by default pclk2 = 8MHZ
 8000248:	2310      	movs	r3, #16
 800024a:	74bb      	strb	r3, [r7, #18]
	SPI_Config.Communication_Mode=SPI_CommunicationMode_2Line_TX_RX;
 800024c:	2300      	movs	r3, #0
 800024e:	80fb      	strh	r3, [r7, #6]

#ifdef MCU_Act_As_Master

	SPI_Config.SPI_Mode=SPI_Mode_Master;
 8000250:	2304      	movs	r3, #4
 8000252:	80bb      	strh	r3, [r7, #4]
	SPI_Config.IRQ_Enable=SPI_IRQ_Enable_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	82bb      	strh	r3, [r7, #20]
	SPI_Config.NSS=SPI_NSS_SW_Internal_slave_select;
 8000258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800025c:	823b      	strh	r3, [r7, #16]
	SPI_Config.P_IRQ_CallBack=NULL;
 800025e:	2300      	movs	r3, #0
 8000260:	61bb      	str	r3, [r7, #24]

#endif

	MCAL_SPI_Init(SPI1, &SPI_Config);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4619      	mov	r1, r3
 8000266:	480d      	ldr	r0, [pc, #52]	; (800029c <main+0xac>)
 8000268:	f000 fab0 	bl	80007cc <MCAL_SPI_Init>
	MCAL_SPI_GPIO_SetPins(SPI1);
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <main+0xac>)
 800026e:	f000 fb7f 	bl	8000970 <MCAL_SPI_GPIO_SetPins>

	//Configure Slave select on PA.4 by GPIO
	GPIO_PConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000272:	2310      	movs	r3, #16
 8000274:	803b      	strh	r3, [r7, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000276:	2304      	movs	r3, #4
 8000278:	70bb      	strb	r3, [r7, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 800027a:	2301      	movs	r3, #1
 800027c:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800027e:	463b      	mov	r3, r7
 8000280:	4619      	mov	r1, r3
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <main+0xb0>)
 8000284:	f000 f9ab 	bl	80005de <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000288:	2201      	movs	r2, #1
 800028a:	2110      	movs	r1, #16
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <main+0xb0>)
 800028e:	f000 fa25 	bl	80006dc <MCAL_GPIO_WritePin>

	while(1)
 8000292:	e7fe      	b.n	8000292 <main+0xa2>
 8000294:	080001a5 	.word	0x080001a5
 8000298:	40013800 	.word	0x40013800
 800029c:	40013000 	.word	0x40013000
 80002a0:	40010800 	.word	0x40010800

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	; (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	; (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 fdc1 	bl	8000e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ff8b 	bl	80001f0 <main>

080002da <LoopForever>:

LoopForever:
    b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000ee0 	.word	0x08000ee0
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	20000068 	.word	0x20000068

080002f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>
	...

080002f8 <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <EXTI0_IRQHandler+0x1c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <EXTI0_IRQHandler+0x1c>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <EXTI0_IRQHandler+0x20>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4798      	blx	r3
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010400 	.word	0x40010400
 8000318:	2000002c 	.word	0x2000002c

0800031c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <EXTI1_IRQHandler+0x1c>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <EXTI1_IRQHandler+0x1c>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <EXTI1_IRQHandler+0x20>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4798      	blx	r3
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400
 800033c:	2000002c 	.word	0x2000002c

08000340 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <EXTI2_IRQHandler+0x1c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <EXTI2_IRQHandler+0x1c>)
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <EXTI2_IRQHandler+0x20>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4798      	blx	r3
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40010400 	.word	0x40010400
 8000360:	2000002c 	.word	0x2000002c

08000364 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI3_IRQHandler+0x1c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <EXTI3_IRQHandler+0x1c>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <EXTI3_IRQHandler+0x20>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4798      	blx	r3
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010400 	.word	0x40010400
 8000384:	2000002c 	.word	0x2000002c

08000388 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <EXTI4_IRQHandler+0x1c>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <EXTI4_IRQHandler+0x1c>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <EXTI4_IRQHandler+0x20>)
 800039a:	691b      	ldr	r3, [r3, #16]
 800039c:	4798      	blx	r3
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40010400 	.word	0x40010400
 80003a8:	2000002c 	.word	0x2000002c

080003ac <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 80003b0:	4b26      	ldr	r3, [pc, #152]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d008      	beq.n	80003ce <EXTI9_5_IRQHandler+0x22>
 80003bc:	4b23      	ldr	r3, [pc, #140]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4a22      	ldr	r2, [pc, #136]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6153      	str	r3, [r2, #20]
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 80003ce:	4b1f      	ldr	r3, [pc, #124]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d008      	beq.n	80003ec <EXTI9_5_IRQHandler+0x40>
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a1b      	ldr	r2, [pc, #108]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d008      	beq.n	800040a <EXTI9_5_IRQHandler+0x5e>
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a13      	ldr	r2, [pc, #76]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000402:	6153      	str	r3, [r2, #20]
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000412:	2b00      	cmp	r3, #0
 8000414:	d008      	beq.n	8000428 <EXTI9_5_IRQHandler+0x7c>
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a0c      	ldr	r2, [pc, #48]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 800041c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 8000424:	6a1b      	ldr	r3, [r3, #32]
 8000426:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000430:	2b00      	cmp	r3, #0
 8000432:	d008      	beq.n	8000446 <EXTI9_5_IRQHandler+0x9a>
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 800043a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800043e:	6153      	str	r3, [r2, #20]
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 8000442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000444:	4798      	blx	r3

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010400 	.word	0x40010400
 8000450:	2000002c 	.word	0x2000002c

08000454 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 8000458:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000460:	2b00      	cmp	r3, #0
 8000462:	d008      	beq.n	8000476 <EXTI15_10_IRQHandler+0x22>
 8000464:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	4a29      	ldr	r2, [pc, #164]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 800046a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046e:	6153      	str	r3, [r2, #20]
 8000470:	4b28      	ldr	r3, [pc, #160]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 8000472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000474:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800047e:	2b00      	cmp	r3, #0
 8000480:	d008      	beq.n	8000494 <EXTI15_10_IRQHandler+0x40>
 8000482:	4b23      	ldr	r3, [pc, #140]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a22      	ldr	r2, [pc, #136]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b21      	ldr	r3, [pc, #132]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 8000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000492:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800049c:	2b00      	cmp	r3, #0
 800049e:	d008      	beq.n	80004b2 <EXTI15_10_IRQHandler+0x5e>
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004aa:	6153      	str	r3, [r2, #20]
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d008      	beq.n	80004d0 <EXTI15_10_IRQHandler+0x7c>
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 80004cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ce:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d008      	beq.n	80004ee <EXTI15_10_IRQHandler+0x9a>
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e6:	6153      	str	r3, [r2, #20]
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 80004ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ec:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d008      	beq.n	800050c <EXTI15_10_IRQHandler+0xb8>
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a04      	ldr	r2, [pc, #16]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b03      	ldr	r3, [pc, #12]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 8000508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050a:	4798      	blx	r3

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40010400 	.word	0x40010400
 8000514:	2000002c 	.word	0x2000002c

08000518 <Get_CRLH_Position>:
 *      Author: ahmed osama
 */
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	2b80      	cmp	r3, #128	; 0x80
 8000526:	d042      	beq.n	80005ae <Get_CRLH_Position+0x96>
 8000528:	2b80      	cmp	r3, #128	; 0x80
 800052a:	dc11      	bgt.n	8000550 <Get_CRLH_Position+0x38>
 800052c:	2b08      	cmp	r3, #8
 800052e:	d036      	beq.n	800059e <Get_CRLH_Position+0x86>
 8000530:	2b08      	cmp	r3, #8
 8000532:	dc06      	bgt.n	8000542 <Get_CRLH_Position+0x2a>
 8000534:	2b02      	cmp	r3, #2
 8000536:	d02e      	beq.n	8000596 <Get_CRLH_Position+0x7e>
 8000538:	2b04      	cmp	r3, #4
 800053a:	d02e      	beq.n	800059a <Get_CRLH_Position+0x82>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d028      	beq.n	8000592 <Get_CRLH_Position+0x7a>
 8000540:	e047      	b.n	80005d2 <Get_CRLH_Position+0xba>
 8000542:	2b20      	cmp	r3, #32
 8000544:	d02f      	beq.n	80005a6 <Get_CRLH_Position+0x8e>
 8000546:	2b40      	cmp	r3, #64	; 0x40
 8000548:	d02f      	beq.n	80005aa <Get_CRLH_Position+0x92>
 800054a:	2b10      	cmp	r3, #16
 800054c:	d029      	beq.n	80005a2 <Get_CRLH_Position+0x8a>
 800054e:	e040      	b.n	80005d2 <Get_CRLH_Position+0xba>
 8000550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000554:	d033      	beq.n	80005be <Get_CRLH_Position+0xa6>
 8000556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800055a:	dc09      	bgt.n	8000570 <Get_CRLH_Position+0x58>
 800055c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000560:	d029      	beq.n	80005b6 <Get_CRLH_Position+0x9e>
 8000562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000566:	d028      	beq.n	80005ba <Get_CRLH_Position+0xa2>
 8000568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800056c:	d021      	beq.n	80005b2 <Get_CRLH_Position+0x9a>
 800056e:	e030      	b.n	80005d2 <Get_CRLH_Position+0xba>
 8000570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000574:	d027      	beq.n	80005c6 <Get_CRLH_Position+0xae>
 8000576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800057a:	dc03      	bgt.n	8000584 <Get_CRLH_Position+0x6c>
 800057c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000580:	d01f      	beq.n	80005c2 <Get_CRLH_Position+0xaa>
 8000582:	e026      	b.n	80005d2 <Get_CRLH_Position+0xba>
 8000584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000588:	d01f      	beq.n	80005ca <Get_CRLH_Position+0xb2>
 800058a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800058e:	d01e      	beq.n	80005ce <Get_CRLH_Position+0xb6>
 8000590:	e01f      	b.n	80005d2 <Get_CRLH_Position+0xba>
	{
		case GPIO_PIN_0 : return 0;  break;
 8000592:	2300      	movs	r3, #0
 8000594:	e01e      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_1 : return 4;  break;
 8000596:	2304      	movs	r3, #4
 8000598:	e01c      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_2 : return 8;  break;
 800059a:	2308      	movs	r3, #8
 800059c:	e01a      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_3 : return 12; break;
 800059e:	230c      	movs	r3, #12
 80005a0:	e018      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_4 : return 16; break;
 80005a2:	2310      	movs	r3, #16
 80005a4:	e016      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_5 : return 20; break;
 80005a6:	2314      	movs	r3, #20
 80005a8:	e014      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_6 : return 24; break;
 80005aa:	2318      	movs	r3, #24
 80005ac:	e012      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_7 : return 28; break;
 80005ae:	231c      	movs	r3, #28
 80005b0:	e010      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_8 : return 0;  break;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e00e      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_9 : return 4;  break;
 80005b6:	2304      	movs	r3, #4
 80005b8:	e00c      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_10: return 8;  break;
 80005ba:	2308      	movs	r3, #8
 80005bc:	e00a      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_11: return 12; break;
 80005be:	230c      	movs	r3, #12
 80005c0:	e008      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_12: return 16; break;
 80005c2:	2310      	movs	r3, #16
 80005c4:	e006      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_13: return 20; break;
 80005c6:	2314      	movs	r3, #20
 80005c8:	e004      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_14: return 24; break;
 80005ca:	2318      	movs	r3, #24
 80005cc:	e002      	b.n	80005d4 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_15: return 28; break;
 80005ce:	231c      	movs	r3, #28
 80005d0:	e000      	b.n	80005d4 <Get_CRLH_Position+0xbc>
	}
	return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <MCAL_GPIO_Init>:

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PConfig_t* PinConfig)
{
 80005de:	b590      	push	{r4, r7, lr}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
	uint8_t PIN_Config=0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 to 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 to 15
	volatile uint32_t* Config_Register=NULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
	Config_Register= (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	2bff      	cmp	r3, #255	; 0xff
 80005f6:	d801      	bhi.n	80005fc <MCAL_GPIO_Init+0x1e>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	e001      	b.n	8000600 <MCAL_GPIO_Init+0x22>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[0:0]
	*(Config_Register) &= ~ (0xf<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff86 	bl	8000518 <Get_CRLH_Position>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	230f      	movs	r3, #15
 8000612:	4093      	lsls	r3, r2
 8000614:	43da      	mvns	r2, r3
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	401a      	ands	r2, r3
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	601a      	str	r2, [r3, #0]

	//if pin is output
	if(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD ||  PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD  )
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d00b      	beq.n	8000640 <MCAL_GPIO_Init+0x62>
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d007      	beq.n	8000640 <MCAL_GPIO_Init+0x62>
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	2b06      	cmp	r3, #6
 8000636:	d003      	beq.n	8000640 <MCAL_GPIO_Init+0x62>
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	789b      	ldrb	r3, [r3, #2]
 800063c:	2b07      	cmp	r3, #7
 800063e:	d10e      	bne.n	800065e <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1:0]
		PIN_Config =( (((PinConfig->GPIO_MODE - 4) << 2 )| (PinConfig->GPIO_Output_SPeed)) & 0x0F);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	3b04      	subs	r3, #4
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	b25a      	sxtb	r2, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	78db      	ldrb	r3, [r3, #3]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	4313      	orrs	r3, r2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f003 030f 	and.w	r3, r3, #15
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	e02c      	b.n	80006b8 <MCAL_GPIO_Init+0xda>
	}

	//if pin is input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE==GPIO_MODE_Analog || PinConfig->GPIO_MODE==GPIO_MODE_INPUT_FLO)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d003      	beq.n	800066e <MCAL_GPIO_Init+0x90>
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d107      	bne.n	800067e <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2 )| 0x0) & 0x0F);
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	789b      	ldrb	r3, [r3, #2]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	e01c      	b.n	80006b8 <MCAL_GPIO_Init+0xda>

		}
		else if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_AF)                   //consider it input floating
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	2b08      	cmp	r3, #8
 8000684:	d102      	bne.n	800068c <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_FLO) << 2 )| (0x0)) & 0x0F);
 8000686:	2304      	movs	r3, #4
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e015      	b.n	80006b8 <MCAL_GPIO_Init+0xda>

		}
		else
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2 )| (0x0)) & 0x0F);
 800068c:	2308      	movs	r3, #8
 800068e:	73fb      	strb	r3, [r7, #15]
			//PD or PP
			if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_PU)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	789b      	ldrb	r3, [r3, #2]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d107      	bne.n	80006a8 <MCAL_GPIO_Init+0xca>
			{
				//in Table 20. port bit configuration table set PxODR 1 for input pull_up
				GPIOx->ODR |=  PinConfig->GPIO_PinNumber;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	8812      	ldrh	r2, [r2, #0]
 80006a0:	431a      	orrs	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	e007      	b.n	80006b8 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//in Table 20. port bit configuration table set PxODR 0 for input pull_down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	8812      	ldrh	r2, [r2, #0]
 80006b0:	43d2      	mvns	r2, r2
 80006b2:	401a      	ands	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	*(Config_Register) |= PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 80006b8:	7bfc      	ldrb	r4, [r7, #15]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff2a 	bl	8000518 <Get_CRLH_Position>
 80006c4:	4603      	mov	r3, r0
 80006c6:	fa04 f203 	lsl.w	r2, r4, r3
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	431a      	orrs	r2, r3
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	601a      	str	r2, [r3, #0]

}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <MCAL_GPIO_WritePin>:
	uint16_t PortStatus;
	PortStatus = (uint16_t)GPIOx->IDR;
	return PortStatus;
}
void MCAL_GPIO_WritePin  (GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t value)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	807b      	strh	r3, [r7, #2]
 80006e8:	4613      	mov	r3, r2
 80006ea:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET)
 80006ec:	787b      	ldrb	r3, [r7, #1]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d006      	beq.n	8000700 <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |= PinNumber;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	68da      	ldr	r2, [r3, #12]
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	431a      	orrs	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60da      	str	r2, [r3, #12]
	else
	{
		GPIOx->ODR &= ~ PinNumber;
	}

}
 80006fe:	e006      	b.n	800070e <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~ PinNumber;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	887a      	ldrh	r2, [r7, #2]
 8000706:	43d2      	mvns	r2, r2
 8000708:	401a      	ands	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	60da      	str	r2, [r3, #12]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <MCAL_RCC_GetSYSFreq>:
//Caution: The AHB clock frequency must be at least 25 MHz when the Ethernet is used.

const uint8_t AHB_PrescTable[16U]={0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};  //shift right

uint32_t MCAL_RCC_GetSYSFreq(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	switch ((RCC->CFGR >> 2) & 0b11)
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MCAL_RCC_GetSYSFreq+0x30>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	089b      	lsrs	r3, r3, #2
 8000722:	f003 0303 	and.w	r3, r3, #3
 8000726:	2b01      	cmp	r3, #1
 8000728:	d006      	beq.n	8000738 <MCAL_RCC_GetSYSFreq+0x20>
 800072a:	2b01      	cmp	r3, #1
 800072c:	d302      	bcc.n	8000734 <MCAL_RCC_GetSYSFreq+0x1c>
 800072e:	2b02      	cmp	r3, #2
 8000730:	d004      	beq.n	800073c <MCAL_RCC_GetSYSFreq+0x24>
 8000732:	e005      	b.n	8000740 <MCAL_RCC_GetSYSFreq+0x28>
	{
	case 0: return HSI_RC_CLK; break;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <MCAL_RCC_GetSYSFreq+0x34>)
 8000736:	e003      	b.n	8000740 <MCAL_RCC_GetSYSFreq+0x28>
	case 1: return HSE_CLK   ; break;
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <MCAL_RCC_GetSYSFreq+0x38>)
 800073a:	e001      	b.n	8000740 <MCAL_RCC_GetSYSFreq+0x28>
	case 2: return 16000000  ; break;
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <MCAL_RCC_GetSYSFreq+0x38>)
 800073e:	e7ff      	b.n	8000740 <MCAL_RCC_GetSYSFreq+0x28>

	}
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000
 800074c:	007a1200 	.word	0x007a1200
 8000750:	00f42400 	.word	0x00f42400

08000754 <MCAL_RCC_GetHCLFreq>:
uint32_t MCAL_RCC_GetHCLFreq(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	//Bits 7:4 HPR: AHB prescaler
	return ( MCAL_RCC_GetSYSFreq() >> AHB_PrescTable[ ((RCC->CFGR >>4) & 0xF) ] );
 8000758:	f7ff ffde 	bl	8000718 <MCAL_RCC_GetSYSFreq>
 800075c:	4601      	mov	r1, r0
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <MCAL_RCC_GetHCLFreq+0x20>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	091b      	lsrs	r3, r3, #4
 8000764:	f003 030f 	and.w	r3, r3, #15
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <MCAL_RCC_GetHCLFreq+0x24>)
 800076a:	5cd3      	ldrb	r3, [r2, r3]
 800076c:	fa21 f303 	lsr.w	r3, r1, r3


}
 8000770:	4618      	mov	r0, r3
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	08000ec8 	.word	0x08000ec8

0800077c <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB high-speed prescaler (APB1)
	return ( MCAL_RCC_GetHCLFreq() >> APB1_PrescTable[ ((RCC->CFGR>>8) & 0b111) ] );
 8000780:	f7ff ffe8 	bl	8000754 <MCAL_RCC_GetHCLFreq>
 8000784:	4601      	mov	r1, r0
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	f003 0307 	and.w	r3, r3, #7
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000792:	5cd3      	ldrb	r3, [r2, r3]
 8000794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	08000eb8 	.word	0x08000eb8

080007a4 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return ( MCAL_RCC_GetHCLFreq() >> APB2_PrescTable[ ((RCC->CFGR>>11) & 0b111) ] );
 80007a8:	f7ff ffd4 	bl	8000754 <MCAL_RCC_GetHCLFreq>
 80007ac:	4601      	mov	r1, r0
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	0adb      	lsrs	r3, r3, #11
 80007b4:	f003 0307 	and.w	r3, r3, #7
 80007b8:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80007ba:	5cd3      	ldrb	r3, [r2, r3]
 80007bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	08000ec0 	.word	0x08000ec0

080007cc <MCAL_SPI_Init>:
 * 				     APIs
 * =================================================
 */

void MCAL_SPI_Init(SPI_TypeDef *SPIx, SPI_Config *SPI_config)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	//safety for registers
	uint16_t tmpReg_CR1=0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpReg_CR2=0;
 80007da:	2300      	movs	r3, #0
 80007dc:	81bb      	strh	r3, [r7, #12]

	if(SPIx==SPI1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <MCAL_SPI_Init+0x104>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d109      	bne.n	80007fa <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = SPI_config;
 80007e6:	4a3b      	ldr	r2, [pc, #236]	; (80008d4 <MCAL_SPI_Init+0x108>)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 80007ec:	4b3a      	ldr	r3, [pc, #232]	; (80008d8 <MCAL_SPI_Init+0x10c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a39      	ldr	r2, [pc, #228]	; (80008d8 <MCAL_SPI_Init+0x10c>)
 80007f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	e00c      	b.n	8000814 <MCAL_SPI_Init+0x48>
	}
	else if(SPIx==SPI2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a37      	ldr	r2, [pc, #220]	; (80008dc <MCAL_SPI_Init+0x110>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d108      	bne.n	8000814 <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_Index] = SPI_config;
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <MCAL_SPI_Init+0x108>)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 8000808:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <MCAL_SPI_Init+0x10c>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	4a32      	ldr	r2, [pc, #200]	; (80008d8 <MCAL_SPI_Init+0x10c>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	61d3      	str	r3, [r2, #28]
	}

	//Enable SPI CR1:Bit6
	tmpReg_CR1 = (1<<6);
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	81fb      	strh	r3, [r7, #14]
	//Master or Slave
	tmpReg_CR1 |= SPI_config->SPI_Mode;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	881a      	ldrh	r2, [r3, #0]
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	4313      	orrs	r3, r2
 8000820:	81fb      	strh	r3, [r7, #14]
	//SPI Communication Mode
	tmpReg_CR1 |= SPI_config->Communication_Mode;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	885a      	ldrh	r2, [r3, #2]
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	4313      	orrs	r3, r2
 800082a:	81fb      	strh	r3, [r7, #14]
	//SPI Frame Format
	tmpReg_CR1 |= SPI_config->FrameFormat;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	889a      	ldrh	r2, [r3, #4]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	4313      	orrs	r3, r2
 8000834:	81fb      	strh	r3, [r7, #14]
	//SPI Data Size
	tmpReg_CR1 |= SPI_config->DataSize;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	88da      	ldrh	r2, [r3, #6]
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	4313      	orrs	r3, r2
 800083e:	81fb      	strh	r3, [r7, #14]
	//SPI Clk Polarity
	tmpReg_CR1 |= SPI_config->ClkPolarity;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	891a      	ldrh	r2, [r3, #8]
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	4313      	orrs	r3, r2
 8000848:	81fb      	strh	r3, [r7, #14]
	//SPI Clk Phase
	tmpReg_CR1 |= SPI_config->ClkPhase;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	895a      	ldrh	r2, [r3, #10]
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	4313      	orrs	r3, r2
 8000852:	81fb      	strh	r3, [r7, #14]
	//NSS
	if(SPI_config->NSS==SPI_NSS_HW_Master_output_Enable)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	899b      	ldrh	r3, [r3, #12]
 8000858:	2b04      	cmp	r3, #4
 800085a:	d105      	bne.n	8000868 <MCAL_SPI_Init+0x9c>
	{
		tmpReg_CR2 |= SPI_config->NSS;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	899a      	ldrh	r2, [r3, #12]
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	4313      	orrs	r3, r2
 8000864:	81bb      	strh	r3, [r7, #12]
 8000866:	e004      	b.n	8000872 <MCAL_SPI_Init+0xa6>
		tmpReg_CR2 &= SPI_config->NSS;

	}
	else
	{
		tmpReg_CR1 |= SPI_config->NSS;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	899a      	ldrh	r2, [r3, #12]
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	4313      	orrs	r3, r2
 8000870:	81fb      	strh	r3, [r7, #14]
	}
	//SPI Prescaler
	tmpReg_CR1 |= SPI_config->SPI_Prescaler;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	7b9b      	ldrb	r3, [r3, #14]
 8000876:	b29a      	uxth	r2, r3
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	4313      	orrs	r3, r2
 800087c:	81fb      	strh	r3, [r7, #14]
	//SPI Enable interrupt
	if(SPI_config->IRQ_Enable !=  SPI_IRQ_Enable_NONE)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	8a1b      	ldrh	r3, [r3, #16]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d019      	beq.n	80008ba <MCAL_SPI_Init+0xee>
	{
		tmpReg_CR2 |= SPI_config->IRQ_Enable;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	8a1a      	ldrh	r2, [r3, #16]
 800088a:	89bb      	ldrh	r3, [r7, #12]
 800088c:	4313      	orrs	r3, r2
 800088e:	81bb      	strh	r3, [r7, #12]
		if(SPIx==SPI1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <MCAL_SPI_Init+0x104>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d106      	bne.n	80008a6 <MCAL_SPI_Init+0xda>
		{
			NVIC_IRQ35_SPI1_Enable;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MCAL_SPI_Init+0x114>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <MCAL_SPI_Init+0x114>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	e009      	b.n	80008ba <MCAL_SPI_Init+0xee>
		}
		else if(SPIx==SPI2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <MCAL_SPI_Init+0x110>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d105      	bne.n	80008ba <MCAL_SPI_Init+0xee>
		{
			NVIC_IRQ36_SPI2_Enable;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MCAL_SPI_Init+0x114>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MCAL_SPI_Init+0x114>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6013      	str	r3, [r2, #0]
		}

	}

	SPIx->CR1=tmpReg_CR1;
 80008ba:	89fa      	ldrh	r2, [r7, #14]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	601a      	str	r2, [r3, #0]
	SPIx->CR2=tmpReg_CR2;
 80008c0:	89ba      	ldrh	r2, [r7, #12]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	605a      	str	r2, [r3, #4]

}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40013000 	.word	0x40013000
 80008d4:	2000001c 	.word	0x2000001c
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40003800 	.word	0x40003800
 80008e0:	e000e104 	.word	0xe000e104

080008e4 <MCAL_SPI_TX_RX>:
		while(!(SPIx->SR & SPI_RXNE));
	}
	*pTxBuffer = SPIx->DR ;
}
void MCAL_SPI_TX_RX(SPI_TypeDef *SPIx, uint16_t *pTxBuffer, enum Pollingmechanism pollingEn)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	4613      	mov	r3, r2
 80008f0:	71fb      	strb	r3, [r7, #7]
	if(pollingEn==PollingEnable)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d106      	bne.n	8000906 <MCAL_SPI_TX_RX+0x22>
	{
		while(!(SPIx->SR & SPI_TXE));
 80008f8:	bf00      	nop
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0f9      	beq.n	80008fa <MCAL_SPI_TX_RX+0x16>
	}
	SPIx->DR= *pTxBuffer;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	60da      	str	r2, [r3, #12]
	if(pollingEn==PollingEnable)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d106      	bne.n	8000924 <MCAL_SPI_TX_RX+0x40>

	{
		while(!(SPIx->SR & SPI_RXNE));
 8000916:	bf00      	nop
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0f9      	beq.n	8000918 <MCAL_SPI_TX_RX+0x34>
	}
	*pTxBuffer = SPIx->DR ;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	b29a      	uxth	r2, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	801a      	strh	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <SPI1_IRQHandler>:
 *                         IRQ
 * ===========================================================
 */

void SPI1_IRQHandler (void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SPI1_IRQHandler+0x18>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	7938      	ldrb	r0, [r7, #4]
 8000946:	4798      	blx	r3

}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000001c 	.word	0x2000001c

08000954 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <SPI2_IRQHandler+0x18>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	7938      	ldrb	r0, [r7, #4]
 8000962:	4798      	blx	r3
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000001c 	.word	0x2000001c

08000970 <MCAL_SPI_GPIO_SetPins>:

void MCAL_SPI_GPIO_SetPins(SPI_TypeDef *SPIx)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	GPIO_PConfig_t PinCfg;

	if(SPIx==SPI1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a73      	ldr	r2, [pc, #460]	; (8000b48 <MCAL_SPI_GPIO_SetPins+0x1d8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d169      	bne.n	8000a54 <MCAL_SPI_GPIO_SetPins+0xe4>
	{
		if(Global_SPI_Config[SPI1_Index]->SPI_Mode==SPI_Mode_Master)
 8000980:	4b72      	ldr	r3, [pc, #456]	; (8000b4c <MCAL_SPI_GPIO_SetPins+0x1dc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2b04      	cmp	r3, #4
 8000988:	d134      	bne.n	80009f4 <MCAL_SPI_GPIO_SetPins+0x84>
		{
			//PA4 : SPI1_NSS
			switch (Global_SPI_Config[SPI1_Index]->NSS)
 800098a:	4b70      	ldr	r3, [pc, #448]	; (8000b4c <MCAL_SPI_GPIO_SetPins+0x1dc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	899b      	ldrh	r3, [r3, #12]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d10c      	bne.n	80009ae <MCAL_SPI_GPIO_SetPins+0x3e>
				PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
				MCAL_GPIO_Init(GPIOA, &PinCfg);

				break;
			case SPI_NSS_HW_Master_output_Enable:
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000994:	2310      	movs	r3, #16
 8000996:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000998:	2306      	movs	r3, #6
 800099a:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	486a      	ldr	r0, [pc, #424]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 80009a8:	f7ff fe19 	bl	80005de <MCAL_GPIO_Init>

				break;
 80009ac:	bf00      	nop
			}
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80009ae:	2320      	movs	r3, #32
 80009b0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80009b2:	2306      	movs	r3, #6
 80009b4:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4619      	mov	r1, r3
 80009c0:	4863      	ldr	r0, [pc, #396]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 80009c2:	f7ff fe0c 	bl	80005de <MCAL_GPIO_Init>

			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	485e      	ldr	r0, [pc, #376]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 80009d6:	f7ff fe02 	bl	80005de <MCAL_GPIO_Init>

			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80009de:	2306      	movs	r3, #6
 80009e0:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	4858      	ldr	r0, [pc, #352]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 80009ee:	f7ff fdf6 	bl	80005de <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOA, &PinCfg);

		}

	}
}
 80009f2:	e0a4      	b.n	8000b3e <MCAL_SPI_GPIO_SetPins+0x1ce>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_HW_Slave)
 80009f4:	4b55      	ldr	r3, [pc, #340]	; (8000b4c <MCAL_SPI_GPIO_SetPins+0x1dc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	899b      	ldrh	r3, [r3, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d109      	bne.n	8000a12 <MCAL_SPI_GPIO_SetPins+0xa2>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80009fe:	2310      	movs	r3, #16
 8000a00:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4850      	ldr	r0, [pc, #320]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000a0e:	f7ff fde6 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000a12:	2320      	movs	r3, #32
 8000a14:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4619      	mov	r1, r3
 8000a20:	484b      	ldr	r0, [pc, #300]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000a22:	f7ff fddc 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4845      	ldr	r0, [pc, #276]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000a3a:	f7ff fdd0 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000a42:	2301      	movs	r3, #1
 8000a44:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4840      	ldr	r0, [pc, #256]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000a4e:	f7ff fdc6 	bl	80005de <MCAL_GPIO_Init>
}
 8000a52:	e074      	b.n	8000b3e <MCAL_SPI_GPIO_SetPins+0x1ce>
	else if(SPIx==SPI2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a3f      	ldr	r2, [pc, #252]	; (8000b54 <MCAL_SPI_GPIO_SetPins+0x1e4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d170      	bne.n	8000b3e <MCAL_SPI_GPIO_SetPins+0x1ce>
		if(Global_SPI_Config[SPI2_Index]->SPI_Mode==SPI_Mode_Master)
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <MCAL_SPI_GPIO_SetPins+0x1dc>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	d138      	bne.n	8000ad8 <MCAL_SPI_GPIO_SetPins+0x168>
			switch (Global_SPI_Config[SPI2_Index]->NSS)
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <MCAL_SPI_GPIO_SetPins+0x1dc>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	899b      	ldrh	r3, [r3, #12]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d10d      	bne.n	8000a8c <MCAL_SPI_GPIO_SetPins+0x11c>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a74:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000a76:	2306      	movs	r3, #6
 8000a78:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4832      	ldr	r0, [pc, #200]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000a86:	f7ff fdaa 	bl	80005de <MCAL_GPIO_Init>
				break;
 8000a8a:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000a92:	2306      	movs	r3, #6
 8000a94:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	482b      	ldr	r0, [pc, #172]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000aa2:	f7ff fd9c 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aaa:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4826      	ldr	r0, [pc, #152]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000ab8:	f7ff fd91 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ac0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481f      	ldr	r0, [pc, #124]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000ad2:	f7ff fd84 	bl	80005de <MCAL_GPIO_Init>
}
 8000ad6:	e032      	b.n	8000b3e <MCAL_SPI_GPIO_SetPins+0x1ce>
			if(Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_HW_Slave)
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MCAL_SPI_GPIO_SetPins+0x1dc>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	899b      	ldrh	r3, [r3, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10a      	bne.n	8000af8 <MCAL_SPI_GPIO_SetPins+0x188>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4619      	mov	r1, r3
 8000af2:	4817      	ldr	r0, [pc, #92]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000af4:	f7ff fd73 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afc:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000b0a:	f7ff fd68 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b12:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000b14:	2306      	movs	r3, #6
 8000b16:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4619      	mov	r1, r3
 8000b22:	480b      	ldr	r0, [pc, #44]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000b24:	f7ff fd5b 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b2c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000b3a:	f7ff fd50 	bl	80005de <MCAL_GPIO_Init>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40013000 	.word	0x40013000
 8000b4c:	2000001c 	.word	0x2000001c
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40003800 	.word	0x40003800

08000b58 <MCAL_UART_Init>:

UART_Config* Global_UART_config =NULL ;


void MCAL_UART_Init(USART_TypeDef* USARTx, UART_Config* UART_Config)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]

	uint32_t pclk, BRR;
	Global_UART_config = UART_Config;
 8000b62:	4a50      	ldr	r2, [pc, #320]	; (8000ca4 <MCAL_UART_Init+0x14c>)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	6013      	str	r3, [r2, #0]

	// enable the clock for given USART peripheral
	if(USARTx==USART1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ca8 <MCAL_UART_Init+0x150>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d106      	bne.n	8000b7e <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000b70:	4b4e      	ldr	r3, [pc, #312]	; (8000cac <MCAL_UART_Init+0x154>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a4d      	ldr	r2, [pc, #308]	; (8000cac <MCAL_UART_Init+0x154>)
 8000b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	e014      	b.n	8000ba8 <MCAL_UART_Init+0x50>
	}
	else if(USARTx==USART2)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a4b      	ldr	r2, [pc, #300]	; (8000cb0 <MCAL_UART_Init+0x158>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d106      	bne.n	8000b94 <MCAL_UART_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 8000b86:	4b49      	ldr	r3, [pc, #292]	; (8000cac <MCAL_UART_Init+0x154>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a48      	ldr	r2, [pc, #288]	; (8000cac <MCAL_UART_Init+0x154>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	e009      	b.n	8000ba8 <MCAL_UART_Init+0x50>
	}
	else if(USARTx==USART3)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a47      	ldr	r2, [pc, #284]	; (8000cb4 <MCAL_UART_Init+0x15c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d105      	bne.n	8000ba8 <MCAL_UART_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 8000b9c:	4b43      	ldr	r3, [pc, #268]	; (8000cac <MCAL_UART_Init+0x154>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a42      	ldr	r2, [pc, #264]	; (8000cac <MCAL_UART_Init+0x154>)
 8000ba2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba6:	61d3      	str	r3, [r2, #28]
	}

	//Enable USART module
	USARTx->CR1 |= 1<<13;      //Bit13: UE
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]

	USARTx->CR1 |= UART_Config->USART_Mode;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |= UART_Config->payload_Length;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	7a12      	ldrb	r2, [r2, #8]
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |= UART_Config->Parity;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	7a52      	ldrb	r2, [r2, #9]
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60da      	str	r2, [r3, #12]
	USARTx->CR2 |= UART_Config->StopBits;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	7a92      	ldrb	r2, [r2, #10]
 8000be6:	431a      	orrs	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	611a      	str	r2, [r3, #16]
	USARTx->CR3 |= UART_Config->FlowCtl;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	7ad2      	ldrb	r2, [r2, #11]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	615a      	str	r2, [r3, #20]

	//configuration of BRR
	if(USARTx==USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ca8 <MCAL_UART_Init+0x150>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d103      	bne.n	8000c0a <MCAL_UART_Init+0xb2>
	{
		 pclk=MCAL_RCC_GetPCLK2Freq();
 8000c02:	f7ff fdcf 	bl	80007a4 <MCAL_RCC_GetPCLK2Freq>
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	e002      	b.n	8000c10 <MCAL_UART_Init+0xb8>
	}
	else
	{
		 pclk=MCAL_RCC_GetPCLK1Freq();
 8000c0a:	f7ff fdb7 	bl	800077c <MCAL_RCC_GetPCLK1Freq>
 8000c0e:	60f8      	str	r0, [r7, #12]
	}

	BRR= UART_BRR_Register(pclk, UART_Config->BaudRate);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1c:	011a      	lsls	r2, r3, #4
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c2a:	4923      	ldr	r1, [pc, #140]	; (8000cb8 <MCAL_UART_Init+0x160>)
 8000c2c:	fb01 f303 	mul.w	r3, r1, r3
 8000c30:	4922      	ldr	r1, [pc, #136]	; (8000cbc <MCAL_UART_Init+0x164>)
 8000c32:	fba1 1303 	umull	r1, r3, r1, r3
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
	USARTx->BRR=BRR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	609a      	str	r2, [r3, #8]

	//enable / disable Interrupt
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	7b1b      	ldrb	r3, [r3, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d026      	beq.n	8000c9c <MCAL_UART_Init+0x144>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	7b12      	ldrb	r2, [r2, #12]
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
		//enable NVIC
		if(USARTx == USART1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <MCAL_UART_Init+0x150>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d106      	bne.n	8000c72 <MCAL_UART_Init+0x11a>
		{
			NVIC_IRQ37_USART1_Enable;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MCAL_UART_Init+0x168>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <MCAL_UART_Init+0x168>)
 8000c6a:	f043 0320 	orr.w	r3, r3, #32
 8000c6e:	6013      	str	r3, [r2, #0]
		{
			NVIC_IRQ39_USART3_Enable;
		}
	}

}
 8000c70:	e014      	b.n	8000c9c <MCAL_UART_Init+0x144>
		else if(USARTx == USART2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <MCAL_UART_Init+0x158>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d106      	bne.n	8000c88 <MCAL_UART_Init+0x130>
			NVIC_IRQ38_USART2_Enable;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MCAL_UART_Init+0x168>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <MCAL_UART_Init+0x168>)
 8000c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c84:	6013      	str	r3, [r2, #0]
}
 8000c86:	e009      	b.n	8000c9c <MCAL_UART_Init+0x144>
		else if(USARTx == USART3)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <MCAL_UART_Init+0x15c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d105      	bne.n	8000c9c <MCAL_UART_Init+0x144>
			NVIC_IRQ39_USART3_Enable;
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MCAL_UART_Init+0x168>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <MCAL_UART_Init+0x168>)
 8000c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000024 	.word	0x20000024
 8000ca8:	40013800 	.word	0x40013800
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40004800 	.word	0x40004800
 8000cb8:	fffff9d0 	.word	0xfffff9d0
 8000cbc:	51eb851f 	.word	0x51eb851f
 8000cc0:	e000e104 	.word	0xe000e104

08000cc4 <MCAL_UART_SendData>:
	}

}

void MCAL_UART_SendData(USART_TypeDef* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn )
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	71fb      	strb	r3, [r7, #7]
	//wait until TXE flag is set in the SR
	if(PollingEn == enable)
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d106      	bne.n	8000ce6 <MCAL_UART_SendData+0x22>
	{
		while(! (USARTx->SR & 1<<7));
 8000cd8:	bf00      	nop
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f9      	beq.n	8000cda <MCAL_UART_SendData+0x16>
	{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0x1FF);
	}
	else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t) 0xFF);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	605a      	str	r2, [r3, #4]
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
	...

08000cfc <MCAL_UART_ReceiveData>:

void MCAL_UART_ReceiveData(USART_TypeDef* USARTx, uint16_t* pRxBuffer, enum Polling_mechanism PollingEn )
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	4613      	mov	r3, r2
 8000d08:	71fb      	strb	r3, [r7, #7]
	//wait until RXNE flag is set in the SR
	if(PollingEn == enable)
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d106      	bne.n	8000d1e <MCAL_UART_ReceiveData+0x22>
	{
		while(! (USARTx->SR & 1<<5));
 8000d10:	bf00      	nop
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f9      	beq.n	8000d12 <MCAL_UART_ReceiveData+0x16>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}
	else
	{
		if(Global_UART_config->Parity==UART_Parity_NONE)
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MCAL_UART_ReceiveData+0x54>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	7a5b      	ldrb	r3, [r3, #9]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d105      	bne.n	8000d34 <MCAL_UART_ReceiveData+0x38>
		{
			//no parity so all 8bits are data
			*((uint16_t*) pRxBuffer) = USARTx->DR;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	801a      	strh	r2, [r3, #0]
		{
			//Parity is used, so 7Bits are data and 1Bit is parity
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}
	}
}
 8000d32:	e007      	b.n	8000d44 <MCAL_UART_ReceiveData+0x48>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	801a      	strh	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000024 	.word	0x20000024

08000d54 <MCAL_UART_SetPins>:
	//wait till TC is set in the SR
	while( ! (USARTx->SR & 1<<6));
}

void MCAL_UART_SetPins(USART_TypeDef* USARTx)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	GPIO_PConfig_t PinCfg;

	if(USARTx==USART1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a2a      	ldr	r2, [pc, #168]	; (8000e08 <MCAL_UART_SetPins+0xb4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d117      	bne.n	8000d94 <MCAL_UART_SetPins+0x40>
	{
		//PA9  TX
		PinCfg.GPIO_PinNumber=GPIO_PIN_9;
 8000d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d68:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	4824      	ldr	r0, [pc, #144]	; (8000e0c <MCAL_UART_SetPins+0xb8>)
 8000d7a:	f7ff fc30 	bl	80005de <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber=GPIO_PIN_10;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d82:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_INPUT_AF;
 8000d84:	2308      	movs	r3, #8
 8000d86:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	481f      	ldr	r0, [pc, #124]	; (8000e0c <MCAL_UART_SetPins+0xb8>)
 8000d90:	f7ff fc25 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}

	if(USARTx==USART2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <MCAL_UART_SetPins+0xbc>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d115      	bne.n	8000dc8 <MCAL_UART_SetPins+0x74>
	{
		//PA2  TX
		PinCfg.GPIO_PinNumber=GPIO_PIN_2;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000da0:	2306      	movs	r3, #6
 8000da2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4619      	mov	r1, r3
 8000dae:	4817      	ldr	r0, [pc, #92]	; (8000e0c <MCAL_UART_SetPins+0xb8>)
 8000db0:	f7ff fc15 	bl	80005de <MCAL_GPIO_Init>

		//PA3 RX
		PinCfg.GPIO_PinNumber=GPIO_PIN_3;
 8000db4:	2308      	movs	r3, #8
 8000db6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_INPUT_AF;
 8000db8:	2308      	movs	r3, #8
 8000dba:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4812      	ldr	r0, [pc, #72]	; (8000e0c <MCAL_UART_SetPins+0xb8>)
 8000dc4:	f7ff fc0b 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}
	}

	if(USARTx==USART3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MCAL_UART_SetPins+0xc0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d117      	bne.n	8000e00 <MCAL_UART_SetPins+0xac>
	{
		//PB10  TX
		PinCfg.GPIO_PinNumber=GPIO_PIN_10;
 8000dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MCAL_UART_SetPins+0xc4>)
 8000de6:	f7ff fbfa 	bl	80005de <MCAL_GPIO_Init>

		//PB11 RX
		PinCfg.GPIO_PinNumber=GPIO_PIN_11;
 8000dea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dee:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_INPUT_AF;
 8000df0:	2308      	movs	r3, #8
 8000df2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <MCAL_UART_SetPins+0xc4>)
 8000dfc:	f7ff fbef 	bl	80005de <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}

}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40004400 	.word	0x40004400
 8000e14:	40004800 	.word	0x40004800
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000e20:	4b02      	ldr	r3, [pc, #8]	; (8000e2c <USART1_IRQHandler+0x10>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	4798      	blx	r3
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000024 	.word	0x20000024

08000e30 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <USART2_IRQHandler+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	4798      	blx	r3
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000024 	.word	0x20000024

08000e44 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <USART3_IRQHandler+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	4798      	blx	r3
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000024 	.word	0x20000024

08000e58 <__libc_init_array>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	4e0c      	ldr	r6, [pc, #48]	; (8000e90 <__libc_init_array+0x38>)
 8000e5e:	4c0d      	ldr	r4, [pc, #52]	; (8000e94 <__libc_init_array+0x3c>)
 8000e60:	1ba4      	subs	r4, r4, r6
 8000e62:	10a4      	asrs	r4, r4, #2
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	d109      	bne.n	8000e7c <__libc_init_array+0x24>
 8000e68:	f000 f81a 	bl	8000ea0 <_init>
 8000e6c:	2500      	movs	r5, #0
 8000e6e:	4e0a      	ldr	r6, [pc, #40]	; (8000e98 <__libc_init_array+0x40>)
 8000e70:	4c0a      	ldr	r4, [pc, #40]	; (8000e9c <__libc_init_array+0x44>)
 8000e72:	1ba4      	subs	r4, r4, r6
 8000e74:	10a4      	asrs	r4, r4, #2
 8000e76:	42a5      	cmp	r5, r4
 8000e78:	d105      	bne.n	8000e86 <__libc_init_array+0x2e>
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}
 8000e7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e80:	4798      	blx	r3
 8000e82:	3501      	adds	r5, #1
 8000e84:	e7ee      	b.n	8000e64 <__libc_init_array+0xc>
 8000e86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e8a:	4798      	blx	r3
 8000e8c:	3501      	adds	r5, #1
 8000e8e:	e7f2      	b.n	8000e76 <__libc_init_array+0x1e>
 8000e90:	08000ed8 	.word	0x08000ed8
 8000e94:	08000ed8 	.word	0x08000ed8
 8000e98:	08000ed8 	.word	0x08000ed8
 8000e9c:	08000edc 	.word	0x08000edc

08000ea0 <_init>:
 8000ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea2:	bf00      	nop
 8000ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea6:	bc08      	pop	{r3}
 8000ea8:	469e      	mov	lr, r3
 8000eaa:	4770      	bx	lr

08000eac <_fini>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	bf00      	nop
 8000eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb2:	bc08      	pop	{r3}
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	4770      	bx	lr
