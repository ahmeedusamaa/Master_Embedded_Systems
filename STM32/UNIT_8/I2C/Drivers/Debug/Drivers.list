
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e64  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000f94  08000f94  00010f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fb4  08000fb4  00010fbc  2**0
                  CONTENTS
  4 .ARM          00000000  08000fb4  08000fb4  00010fbc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fb4  08000fbc  00010fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fb4  08000fb4  00010fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fb8  08000fb8  00010fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  08000fbc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08000fbc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fbc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d85  00000000  00000000  00010fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000100e  00000000  00000000  00017d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000111a  00000000  00000000  00018d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002b8  00000000  00000000  00019e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000230  00000000  00000000  0001a150  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000030b7  00000000  00000000  0001a380  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000349e  00000000  00000000  0001d437  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c419  00000000  00000000  000208d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002ccee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008c4  00000000  00000000  0002cd6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f7c 	.word	0x08000f7c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f7c 	.word	0x08000f7c

08000170 <eeprom_Init>:


#include "I2C_Slave_EEPROM.h"

void eeprom_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	I2C_Config I2C1_cfg;
	I2C1_cfg.General_Call_Address_Detection= I2C_ENGC_Enable;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	61bb      	str	r3, [r7, #24]
	I2C1_cfg.I2C_ACK_Control= I2C_ACK_Control_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	60fb      	str	r3, [r7, #12]
	I2C1_cfg.I2C_CLK_speed= I2C_CLK_speed_SM_100k;
 8000180:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000184:	603b      	str	r3, [r7, #0]
	I2C1_cfg.I2C_Mode= I2C_Mode_I2C;
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
	I2C1_cfg.P_Slave_Event_CallBack=NULL;
 800018a:	2300      	movs	r3, #0
 800018c:	61fb      	str	r3, [r7, #28]
	I2C1_cfg.I2C_Stretch_Mode=I2C_Stretch_Mode_Enable;
 800018e:	2300      	movs	r3, #0
 8000190:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <eeprom_Init+0x3c>)
 8000194:	f000 fc02 	bl	800099c <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1_cfg);
 8000198:	463b      	mov	r3, r7
 800019a:	4619      	mov	r1, r3
 800019c:	4803      	ldr	r0, [pc, #12]	; (80001ac <eeprom_Init+0x3c>)
 800019e:	f000 faed 	bl	800077c <MCAL_I2C_Init>

}
 80001a2:	bf00      	nop
 80001a4:	3720      	adds	r7, #32
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_Nbytes>:

uint8_t eeprom_write_Nbytes(unsigned int Memory_address, uint8_t* Bytes, uint8_t dataLength)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[256];
	buffer[0]= Memory_address>>8; 	//upper byte memory address
 80001c6:	f107 030c 	add.w	r3, r7, #12
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	0a1b      	lsrs	r3, r3, #8
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	701a      	strb	r2, [r3, #0]
	buffer[1]= Memory_address;		//lower byte memory address
 80001d6:	f107 030c 	add.w	r3, r7, #12
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	705a      	strb	r2, [r3, #1]
	uint8_t i ;
	//Data
	for(i=2; i < (dataLength+2); i++)
 80001e4:	2302      	movs	r3, #2
 80001e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001ea:	e011      	b.n	8000210 <eeprom_write_Nbytes+0x60>
	{
		buffer[i]= Bytes[i-2];
 80001ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f0:	3b02      	subs	r3, #2
 80001f2:	f107 0208 	add.w	r2, r7, #8
 80001f6:	6812      	ldr	r2, [r2, #0]
 80001f8:	441a      	add	r2, r3
 80001fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001fe:	7811      	ldrb	r1, [r2, #0]
 8000200:	f107 0214 	add.w	r2, r7, #20
 8000204:	54d1      	strb	r1, [r2, r3]
	for(i=2; i < (dataLength+2); i++)
 8000206:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800020a:	3301      	adds	r3, #1
 800020c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000210:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8000214:	1dfb      	adds	r3, r7, #7
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	3302      	adds	r3, #2
 800021a:	429a      	cmp	r2, r3
 800021c:	dbe6      	blt.n	80001ec <eeprom_write_Nbytes+0x3c>
	}
	MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_address, buffer, (dataLength+2), With_Stop, start);
 800021e:	1dfb      	adds	r3, r7, #7
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	3302      	adds	r3, #2
 8000224:	4619      	mov	r1, r3
 8000226:	f107 0214 	add.w	r2, r7, #20
 800022a:	2300      	movs	r3, #0
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2300      	movs	r3, #0
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	460b      	mov	r3, r1
 8000234:	212a      	movs	r1, #42	; 0x2a
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <eeprom_write_Nbytes+0x98>)
 8000238:	f000 fbfa 	bl	8000a30 <MCAL_I2C_Master_Tx>
	return 0;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40005400 	.word	0x40005400

0800024c <eeprom_read_byte>:
uint8_t eeprom_read_byte(unsigned int Memory_address, uint8_t* Bytes, uint8_t dataLength)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af02      	add	r7, sp, #8
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	4613      	mov	r3, r2
 8000258:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];
	buffer[0]= Memory_address>>8; 	//upper byte memory address
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	0a1b      	lsrs	r3, r3, #8
 800025e:	b2db      	uxtb	r3, r3
 8000260:	753b      	strb	r3, [r7, #20]
	buffer[1]= Memory_address;		//lower byte memory address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_address, buffer, 2, With_Stop, start);
 8000268:	f107 0214 	add.w	r2, r7, #20
 800026c:	2300      	movs	r3, #0
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	2300      	movs	r3, #0
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2302      	movs	r3, #2
 8000276:	212a      	movs	r1, #42	; 0x2a
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <eeprom_read_byte+0x54>)
 800027a:	f000 fbd9 	bl	8000a30 <MCAL_I2C_Master_Tx>
	MCAL_I2C_Master_Rx(I2C1, EEPROM_Slave_address, Bytes, dataLength, With_Stop, RepeatedStart);
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2301      	movs	r3, #1
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	2300      	movs	r3, #0
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	4613      	mov	r3, r2
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	212a      	movs	r1, #42	; 0x2a
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <eeprom_read_byte+0x54>)
 8000290:	f000 fc2c 	bl	8000aec <MCAL_I2C_Master_Rx>
	return 0;
 8000294:	2300      	movs	r3, #0

}
 8000296:	4618      	mov	r0, r3
 8000298:	3718      	adds	r7, #24
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40005400 	.word	0x40005400

080002a4 <main>:
#endif

}

int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	 */


	// TO ENABLE CLOCK SIGNAL FOR GPIOA
	RCC_GPIOA_CLK_EN();
 80002aa:	4b24      	ldr	r3, [pc, #144]	; (800033c <main+0x98>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a23      	ldr	r2, [pc, #140]	; (800033c <main+0x98>)
 80002b0:	f043 0304 	orr.w	r3, r3, #4
 80002b4:	6193      	str	r3, [r2, #24]
	// TO ENABLE CLOCK SIGNAL FOR GPIOB
	RCC_GPIOB_CLK_EN();
 80002b6:	4b21      	ldr	r3, [pc, #132]	; (800033c <main+0x98>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	4a20      	ldr	r2, [pc, #128]	; (800033c <main+0x98>)
 80002bc:	f043 0308 	orr.w	r3, r3, #8
 80002c0:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <main+0x98>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a1d      	ldr	r2, [pc, #116]	; (800033c <main+0x98>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6193      	str	r3, [r2, #24]

	unsigned char ch1[]= {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <main+0x9c>)
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d8:	6018      	str	r0, [r3, #0]
 80002da:	3304      	adds	r3, #4
 80002dc:	8019      	strh	r1, [r3, #0]
 80002de:	3302      	adds	r3, #2
 80002e0:	0c0a      	lsrs	r2, r1, #16
 80002e2:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7]= {0};
 80002e4:	463b      	mov	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	f8c3 2003 	str.w	r2, [r3, #3]

	eeprom_Init();
 80002ee:	f7ff ff3f 	bl	8000170 <eeprom_Init>
	eeprom_write_Nbytes(0xAF, ch1, 7);
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2207      	movs	r2, #7
 80002f8:	4619      	mov	r1, r3
 80002fa:	20af      	movs	r0, #175	; 0xaf
 80002fc:	f7ff ff58 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xAF, ch2, 7);
 8000300:	463b      	mov	r3, r7
 8000302:	2207      	movs	r2, #7
 8000304:	4619      	mov	r1, r3
 8000306:	20af      	movs	r0, #175	; 0xaf
 8000308:	f7ff ffa0 	bl	800024c <eeprom_read_byte>

	ch1[0] = 0xA;
 800030c:	230a      	movs	r3, #10
 800030e:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000310:	230b      	movs	r3, #11
 8000312:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000314:	230c      	movs	r3, #12
 8000316:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000318:	230d      	movs	r3, #13
 800031a:	72fb      	strb	r3, [r7, #11]

	eeprom_write_Nbytes(0xFFF, ch1, 4);
 800031c:	f107 0308 	add.w	r3, r7, #8
 8000320:	2204      	movs	r2, #4
 8000322:	4619      	mov	r1, r3
 8000324:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000328:	f7ff ff42 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xFFF, ch2, 4);
 800032c:	463b      	mov	r3, r7
 800032e:	2204      	movs	r2, #4
 8000330:	4619      	mov	r1, r3
 8000332:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000336:	f7ff ff89 	bl	800024c <eeprom_read_byte>

	while(1)
 800033a:	e7fe      	b.n	800033a <main+0x96>
 800033c:	40021000 	.word	0x40021000
 8000340:	08000f94 	.word	0x08000f94

08000344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000346:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000348:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	; (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	; (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000372:	f000 fddf 	bl	8000f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000376:	f7ff ff95 	bl	80002a4 <main>

0800037a <LoopForever>:

LoopForever:
    b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   r0, =_estack
 800037c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000388:	08000fbc 	.word	0x08000fbc
  ldr r2, =_sbss
 800038c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000390:	200000a4 	.word	0x200000a4

08000394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC1_2_IRQHandler>
	...

08000398 <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <EXTI0_IRQHandler+0x1c>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <EXTI0_IRQHandler+0x1c>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <EXTI0_IRQHandler+0x20>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4798      	blx	r3
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010400 	.word	0x40010400
 80003b8:	20000068 	.word	0x20000068

080003bc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <EXTI1_IRQHandler+0x1c>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <EXTI1_IRQHandler+0x1c>)
 80003c6:	f043 0302 	orr.w	r3, r3, #2
 80003ca:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <EXTI1_IRQHandler+0x20>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4798      	blx	r3
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010400 	.word	0x40010400
 80003dc:	20000068 	.word	0x20000068

080003e0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <EXTI2_IRQHandler+0x1c>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <EXTI2_IRQHandler+0x1c>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <EXTI2_IRQHandler+0x20>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	4798      	blx	r3
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40010400 	.word	0x40010400
 8000400:	20000068 	.word	0x20000068

08000404 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <EXTI3_IRQHandler+0x1c>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <EXTI3_IRQHandler+0x1c>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <EXTI3_IRQHandler+0x20>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	4798      	blx	r3
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40010400 	.word	0x40010400
 8000424:	20000068 	.word	0x20000068

08000428 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <EXTI4_IRQHandler+0x1c>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <EXTI4_IRQHandler+0x1c>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <EXTI4_IRQHandler+0x20>)
 800043a:	691b      	ldr	r3, [r3, #16]
 800043c:	4798      	blx	r3
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40010400 	.word	0x40010400
 8000448:	20000068 	.word	0x20000068

0800044c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 8000450:	4b26      	ldr	r3, [pc, #152]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	2b00      	cmp	r3, #0
 800045a:	d008      	beq.n	800046e <EXTI9_5_IRQHandler+0x22>
 800045c:	4b23      	ldr	r3, [pc, #140]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	4a22      	ldr	r2, [pc, #136]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6153      	str	r3, [r2, #20]
 8000468:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <EXTI9_5_IRQHandler+0xa4>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 800046e:	4b1f      	ldr	r3, [pc, #124]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000476:	2b00      	cmp	r3, #0
 8000478:	d008      	beq.n	800048c <EXTI9_5_IRQHandler+0x40>
 800047a:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a1b      	ldr	r2, [pc, #108]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 8000480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <EXTI9_5_IRQHandler+0xa4>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000494:	2b00      	cmp	r3, #0
 8000496:	d008      	beq.n	80004aa <EXTI9_5_IRQHandler+0x5e>
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	4a13      	ldr	r2, [pc, #76]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 800049e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a2:	6153      	str	r3, [r2, #20]
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <EXTI9_5_IRQHandler+0xa4>)
 80004a6:	69db      	ldr	r3, [r3, #28]
 80004a8:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d008      	beq.n	80004c8 <EXTI9_5_IRQHandler+0x7c>
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 80004bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <EXTI9_5_IRQHandler+0xa4>)
 80004c4:	6a1b      	ldr	r3, [r3, #32]
 80004c6:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d008      	beq.n	80004e6 <EXTI9_5_IRQHandler+0x9a>
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <EXTI9_5_IRQHandler+0xa0>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6153      	str	r3, [r2, #20]
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <EXTI9_5_IRQHandler+0xa4>)
 80004e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e4:	4798      	blx	r3

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40010400 	.word	0x40010400
 80004f0:	20000068 	.word	0x20000068

080004f4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 80004f8:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000500:	2b00      	cmp	r3, #0
 8000502:	d008      	beq.n	8000516 <EXTI15_10_IRQHandler+0x22>
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	4a29      	ldr	r2, [pc, #164]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 800050a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050e:	6153      	str	r3, [r2, #20]
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <EXTI15_10_IRQHandler+0xc0>)
 8000512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000514:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800051e:	2b00      	cmp	r3, #0
 8000520:	d008      	beq.n	8000534 <EXTI15_10_IRQHandler+0x40>
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <EXTI15_10_IRQHandler+0xc0>)
 8000530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000532:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800053c:	2b00      	cmp	r3, #0
 800053e:	d008      	beq.n	8000552 <EXTI15_10_IRQHandler+0x5e>
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000546:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054a:	6153      	str	r3, [r2, #20]
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <EXTI15_10_IRQHandler+0xc0>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055a:	2b00      	cmp	r3, #0
 800055c:	d008      	beq.n	8000570 <EXTI15_10_IRQHandler+0x7c>
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000564:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <EXTI15_10_IRQHandler+0xc0>)
 800056c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800056e:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	2b00      	cmp	r3, #0
 800057a:	d008      	beq.n	800058e <EXTI15_10_IRQHandler+0x9a>
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6153      	str	r3, [r2, #20]
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <EXTI15_10_IRQHandler+0xc0>)
 800058a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800058c:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000596:	2b00      	cmp	r3, #0
 8000598:	d008      	beq.n	80005ac <EXTI15_10_IRQHandler+0xb8>
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <EXTI15_10_IRQHandler+0xbc>)
 80005a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <EXTI15_10_IRQHandler+0xc0>)
 80005a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005aa:	4798      	blx	r3

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40010400 	.word	0x40010400
 80005b4:	20000068 	.word	0x20000068

080005b8 <Get_CRLH_Position>:
 *      Author: ahmed osama
 */
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2b80      	cmp	r3, #128	; 0x80
 80005c6:	d042      	beq.n	800064e <Get_CRLH_Position+0x96>
 80005c8:	2b80      	cmp	r3, #128	; 0x80
 80005ca:	dc11      	bgt.n	80005f0 <Get_CRLH_Position+0x38>
 80005cc:	2b08      	cmp	r3, #8
 80005ce:	d036      	beq.n	800063e <Get_CRLH_Position+0x86>
 80005d0:	2b08      	cmp	r3, #8
 80005d2:	dc06      	bgt.n	80005e2 <Get_CRLH_Position+0x2a>
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d02e      	beq.n	8000636 <Get_CRLH_Position+0x7e>
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d02e      	beq.n	800063a <Get_CRLH_Position+0x82>
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d028      	beq.n	8000632 <Get_CRLH_Position+0x7a>
 80005e0:	e047      	b.n	8000672 <Get_CRLH_Position+0xba>
 80005e2:	2b20      	cmp	r3, #32
 80005e4:	d02f      	beq.n	8000646 <Get_CRLH_Position+0x8e>
 80005e6:	2b40      	cmp	r3, #64	; 0x40
 80005e8:	d02f      	beq.n	800064a <Get_CRLH_Position+0x92>
 80005ea:	2b10      	cmp	r3, #16
 80005ec:	d029      	beq.n	8000642 <Get_CRLH_Position+0x8a>
 80005ee:	e040      	b.n	8000672 <Get_CRLH_Position+0xba>
 80005f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005f4:	d033      	beq.n	800065e <Get_CRLH_Position+0xa6>
 80005f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005fa:	dc09      	bgt.n	8000610 <Get_CRLH_Position+0x58>
 80005fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000600:	d029      	beq.n	8000656 <Get_CRLH_Position+0x9e>
 8000602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000606:	d028      	beq.n	800065a <Get_CRLH_Position+0xa2>
 8000608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800060c:	d021      	beq.n	8000652 <Get_CRLH_Position+0x9a>
 800060e:	e030      	b.n	8000672 <Get_CRLH_Position+0xba>
 8000610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000614:	d027      	beq.n	8000666 <Get_CRLH_Position+0xae>
 8000616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800061a:	dc03      	bgt.n	8000624 <Get_CRLH_Position+0x6c>
 800061c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000620:	d01f      	beq.n	8000662 <Get_CRLH_Position+0xaa>
 8000622:	e026      	b.n	8000672 <Get_CRLH_Position+0xba>
 8000624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000628:	d01f      	beq.n	800066a <Get_CRLH_Position+0xb2>
 800062a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800062e:	d01e      	beq.n	800066e <Get_CRLH_Position+0xb6>
 8000630:	e01f      	b.n	8000672 <Get_CRLH_Position+0xba>
	{
		case GPIO_PIN_0 : return 0;  break;
 8000632:	2300      	movs	r3, #0
 8000634:	e01e      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_1 : return 4;  break;
 8000636:	2304      	movs	r3, #4
 8000638:	e01c      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_2 : return 8;  break;
 800063a:	2308      	movs	r3, #8
 800063c:	e01a      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_3 : return 12; break;
 800063e:	230c      	movs	r3, #12
 8000640:	e018      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_4 : return 16; break;
 8000642:	2310      	movs	r3, #16
 8000644:	e016      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_5 : return 20; break;
 8000646:	2314      	movs	r3, #20
 8000648:	e014      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_6 : return 24; break;
 800064a:	2318      	movs	r3, #24
 800064c:	e012      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_7 : return 28; break;
 800064e:	231c      	movs	r3, #28
 8000650:	e010      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_8 : return 0;  break;
 8000652:	2300      	movs	r3, #0
 8000654:	e00e      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_9 : return 4;  break;
 8000656:	2304      	movs	r3, #4
 8000658:	e00c      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_10: return 8;  break;
 800065a:	2308      	movs	r3, #8
 800065c:	e00a      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_11: return 12; break;
 800065e:	230c      	movs	r3, #12
 8000660:	e008      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_12: return 16; break;
 8000662:	2310      	movs	r3, #16
 8000664:	e006      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_13: return 20; break;
 8000666:	2314      	movs	r3, #20
 8000668:	e004      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_14: return 24; break;
 800066a:	2318      	movs	r3, #24
 800066c:	e002      	b.n	8000674 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_15: return 28; break;
 800066e:	231c      	movs	r3, #28
 8000670:	e000      	b.n	8000674 <Get_CRLH_Position+0xbc>
	}
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <MCAL_GPIO_Init>:

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PConfig_t* PinConfig)
{
 800067e:	b590      	push	{r4, r7, lr}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	6039      	str	r1, [r7, #0]
	uint8_t PIN_Config=0;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 to 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 to 15
	volatile uint32_t* Config_Register=NULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
	Config_Register= (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	2bff      	cmp	r3, #255	; 0xff
 8000696:	d801      	bhi.n	800069c <MCAL_GPIO_Init+0x1e>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	e001      	b.n	80006a0 <MCAL_GPIO_Init+0x22>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3304      	adds	r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[0:0]
	*(Config_Register) &= ~ (0xf<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff86 	bl	80005b8 <Get_CRLH_Position>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	230f      	movs	r3, #15
 80006b2:	4093      	lsls	r3, r2
 80006b4:	43da      	mvns	r2, r3
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	401a      	ands	r2, r3
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	601a      	str	r2, [r3, #0]

	//if pin is output
	if(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD ||  PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD  )
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	789b      	ldrb	r3, [r3, #2]
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	d00b      	beq.n	80006e0 <MCAL_GPIO_Init+0x62>
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	789b      	ldrb	r3, [r3, #2]
 80006cc:	2b05      	cmp	r3, #5
 80006ce:	d007      	beq.n	80006e0 <MCAL_GPIO_Init+0x62>
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d003      	beq.n	80006e0 <MCAL_GPIO_Init+0x62>
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d10e      	bne.n	80006fe <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1:0]
		PIN_Config =( (((PinConfig->GPIO_MODE - 4) << 2 )| (PinConfig->GPIO_Output_SPeed)) & 0x0F);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	3b04      	subs	r3, #4
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	b25a      	sxtb	r2, r3
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	78db      	ldrb	r3, [r3, #3]
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e02c      	b.n	8000758 <MCAL_GPIO_Init+0xda>
	}

	//if pin is input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE==GPIO_MODE_Analog || PinConfig->GPIO_MODE==GPIO_MODE_INPUT_FLO)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	789b      	ldrb	r3, [r3, #2]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d003      	beq.n	800070e <MCAL_GPIO_Init+0x90>
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	789b      	ldrb	r3, [r3, #2]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d107      	bne.n	800071e <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2 )| 0x0) & 0x0F);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	b2db      	uxtb	r3, r3
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	73fb      	strb	r3, [r7, #15]
 800071c:	e01c      	b.n	8000758 <MCAL_GPIO_Init+0xda>

		}
		else if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_AF)                   //consider it input floating
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	789b      	ldrb	r3, [r3, #2]
 8000722:	2b08      	cmp	r3, #8
 8000724:	d102      	bne.n	800072c <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_FLO) << 2 )| (0x0)) & 0x0F);
 8000726:	2304      	movs	r3, #4
 8000728:	73fb      	strb	r3, [r7, #15]
 800072a:	e015      	b.n	8000758 <MCAL_GPIO_Init+0xda>

		}
		else
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2 )| (0x0)) & 0x0F);
 800072c:	2308      	movs	r3, #8
 800072e:	73fb      	strb	r3, [r7, #15]
			//PD or PP
			if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_PU)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	789b      	ldrb	r3, [r3, #2]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d107      	bne.n	8000748 <MCAL_GPIO_Init+0xca>
			{
				//in Table 20. port bit configuration table set PxODR 1 for input pull_up
				GPIOx->ODR |=  PinConfig->GPIO_PinNumber;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	8812      	ldrh	r2, [r2, #0]
 8000740:	431a      	orrs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	e007      	b.n	8000758 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//in Table 20. port bit configuration table set PxODR 0 for input pull_down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	8812      	ldrh	r2, [r2, #0]
 8000750:	43d2      	mvns	r2, r2
 8000752:	401a      	ands	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	*(Config_Register) |= PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 8000758:	7bfc      	ldrb	r4, [r7, #15]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff2a 	bl	80005b8 <Get_CRLH_Position>
 8000764:	4603      	mov	r3, r0
 8000766:	fa04 f203 	lsl.w	r2, r4, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	431a      	orrs	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	601a      	str	r2, [r3, #0]

}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <MCAL_I2C_Init>:
/*========================================================
 * 			APIs Supported by "MCAL I2C DRIVER"
 *========================================================
 */
void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_Config* I2C_Config)
{
 800077c:	b5b0      	push	{r4, r5, r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	uint32_t pclk1= 8000000UL;
 8000786:	4b7d      	ldr	r3, [pc, #500]	; (800097c <MCAL_I2C_Init+0x200>)
 8000788:	617b      	str	r3, [r7, #20]
	uint16_t tempReg=0 , freqRange=0;
 800078a:	2300      	movs	r3, #0
 800078c:	827b      	strh	r3, [r7, #18]
 800078e:	2300      	movs	r3, #0
 8000790:	823b      	strh	r3, [r7, #16]
	uint16_t result=0;
 8000792:	2300      	movs	r3, #0
 8000794:	81fb      	strh	r3, [r7, #14]
	if(I2Cx==I2C1)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a79      	ldr	r2, [pc, #484]	; (8000980 <MCAL_I2C_Init+0x204>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d110      	bne.n	80007c0 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX]= *I2C_Config;
 800079e:	4a79      	ldr	r2, [pc, #484]	; (8000984 <MCAL_I2C_Init+0x208>)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	4614      	mov	r4, r2
 80007a4:	461d      	mov	r5, r3
 80007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C1_CLK_EN();
 80007b2:	4b75      	ldr	r3, [pc, #468]	; (8000988 <MCAL_I2C_Init+0x20c>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a74      	ldr	r2, [pc, #464]	; (8000988 <MCAL_I2C_Init+0x20c>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	e014      	b.n	80007ea <MCAL_I2C_Init+0x6e>
	}
	else if(I2Cx==I2C2)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a72      	ldr	r2, [pc, #456]	; (800098c <MCAL_I2C_Init+0x210>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d110      	bne.n	80007ea <MCAL_I2C_Init+0x6e>
	{
		Global_I2C_Config[I2C2_INDEX]= *I2C_Config;
 80007c8:	4b6e      	ldr	r3, [pc, #440]	; (8000984 <MCAL_I2C_Init+0x208>)
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	f103 0420 	add.w	r4, r3, #32
 80007d0:	4615      	mov	r5, r2
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C2_CLK_EN();
 80007de:	4b6a      	ldr	r3, [pc, #424]	; (8000988 <MCAL_I2C_Init+0x20c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a69      	ldr	r2, [pc, #420]	; (8000988 <MCAL_I2C_Init+0x20c>)
 80007e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e8:	61d3      	str	r3, [r2, #28]
	}
	if (I2C_Config->I2C_Mode == I2C_Mode_I2C)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d17c      	bne.n	80008ec <MCAL_I2C_Init+0x170>
	{
		/*
		 *   Bits 5:0 FREQ[5:0]: Set Peripheral clock frequency
		 */
		//Get the I2Cx_CR2 value
		tempReg= I2Cx->CR2;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	827b      	strh	r3, [r7, #18]
		//Clear frequency FREQ[5:0] bits
		tempReg &= ~(I2C_CR2_FREQ_Msk);
 80007f8:	8a7b      	ldrh	r3, [r7, #18]
 80007fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007fe:	827b      	strh	r3, [r7, #18]
		//Get the pclk1 frequency value
		pclk1= MCAL_RCC_GetPCLK1Freq();
 8000800:	f000 fb4a 	bl	8000e98 <MCAL_RCC_GetPCLK1Freq>
 8000804:	6178      	str	r0, [r7, #20]
		//Set frequency FREQ[5:0] bits
		freqRange= (uint16_t)(pclk1/1000000);
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	4a61      	ldr	r2, [pc, #388]	; (8000990 <MCAL_I2C_Init+0x214>)
 800080a:	fba2 2303 	umull	r2, r3, r2, r3
 800080e:	0c9b      	lsrs	r3, r3, #18
 8000810:	823b      	strh	r3, [r7, #16]
		tempReg |= freqRange;
 8000812:	8a7a      	ldrh	r2, [r7, #18]
 8000814:	8a3b      	ldrh	r3, [r7, #16]
 8000816:	4313      	orrs	r3, r2
 8000818:	827b      	strh	r3, [r7, #18]
		I2Cx->CR2= tempReg;
 800081a:	8a7a      	ldrh	r2, [r7, #18]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	605a      	str	r2, [r3, #4]

		//The CCR register must be configured only when the I2C is disabled (PE = 0)
		I2Cx->CR1 &=~(I2C_CR1_PE);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f023 0201 	bic.w	r2, r3, #1
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	601a      	str	r2, [r3, #0]

		tempReg=0;
 800082c:	2300      	movs	r3, #0
 800082e:	827b      	strh	r3, [r7, #18]
		/*
		 * Configure the clock control registers --->>>CCR[11:0]:Thigh = CCR * TPCLK1
		 */
		//Configure the Speed in Standard mode
		if((I2C_Config->I2C_CLK_speed==I2C_CLK_speed_SM_50k) || (I2C_Config->I2C_CLK_speed==I2C_CLK_speed_SM_100k) )
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b50      	cmp	r3, #80	; 0x50
 8000836:	d004      	beq.n	8000842 <MCAL_I2C_Init+0xc6>
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000840:	d112      	bne.n	8000868 <MCAL_I2C_Init+0xec>
		{
			//Bit 15 already 0 (0:Sm mode I2C)
			// Tclk/2= CRR * Tpclk1
			// CRR= Tclk/(2*Tpclk1)
			// CRR= Fpclk1/(2*I2C_clk_speed)
			result= (uint16_t)(pclk1/(I2C_Config->I2C_CLK_speed << 1));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	81fb      	strh	r3, [r7, #14]
			tempReg|=result;
 8000850:	8a7a      	ldrh	r2, [r7, #18]
 8000852:	89fb      	ldrh	r3, [r7, #14]
 8000854:	4313      	orrs	r3, r2
 8000856:	827b      	strh	r3, [r7, #18]
			I2Cx->CCR= tempReg;
 8000858:	8a7a      	ldrh	r2, [r7, #18]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	61da      	str	r2, [r3, #28]
		For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
		If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
		therefore the TRISE[5:0] bits must be programmed with 09h.
		(1000 ns / 125 ns = 8 + 1)
			 */
			I2Cx->TRISE=freqRange+1;
 800085e:	8a3b      	ldrh	r3, [r7, #16]
 8000860:	3301      	adds	r3, #1
 8000862:	461a      	mov	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	621a      	str	r2, [r3, #32]
		}
		/********Configuration struct*********/
		tempReg=I2Cx->CR1;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	827b      	strh	r3, [r7, #18]
		tempReg |= (I2C_Config->I2C_ACK_Control | I2C_Config->I2C_Mode | I2C_Config->I2C_Stretch_Mode | I2C_Config->General_Call_Address_Detection);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	b29a      	uxth	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	b29b      	uxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b29a      	uxth	r2, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	b29b      	uxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b29a      	uxth	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	b29b      	uxth	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b29a      	uxth	r2, r3
 8000892:	8a7b      	ldrh	r3, [r7, #18]
 8000894:	4313      	orrs	r3, r2
 8000896:	827b      	strh	r3, [r7, #18]

		I2Cx->CR1=tempReg;
 8000898:	8a7a      	ldrh	r2, [r7, #18]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]

		tempReg=0;
 800089e:	2300      	movs	r3, #0
 80008a0:	827b      	strh	r3, [r7, #18]
		if(I2C_Config->I2C_Slave_address.Dual_Address_Enable==1)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	8a1b      	ldrh	r3, [r3, #16]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10d      	bne.n	80008c6 <MCAL_I2C_Init+0x14a>
		{
			//Dual addressing mode enable
			tempReg=I2C_OAR2_ENDUAL;
 80008aa:	2301      	movs	r3, #1
 80008ac:	827b      	strh	r3, [r7, #18]

			tempReg |=I2C_Config->I2C_Slave_address.Secondary_Slave_address << I2C_OAR2_ADD2_Pos;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	8a9b      	ldrh	r3, [r3, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21b      	sxth	r3, r3
 80008be:	827b      	strh	r3, [r7, #18]
			I2Cx->OAR2=tempReg;
 80008c0:	8a7a      	ldrh	r2, [r7, #18]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	60da      	str	r2, [r3, #12]
		}
		tempReg= 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	827b      	strh	r3, [r7, #18]

		tempReg |=I2C_Config->I2C_Slave_address.Primary_slave_address << 1;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	8a5b      	ldrh	r3, [r3, #18]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b21b      	sxth	r3, r3
 80008da:	827b      	strh	r3, [r7, #18]
		tempReg |=I2C_Config->I2C_Slave_address.I2C_Addressing_Slave_mode ;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	8ada      	ldrh	r2, [r3, #22]
 80008e0:	8a7b      	ldrh	r3, [r7, #18]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	827b      	strh	r3, [r7, #18]
		I2Cx->OAR1=tempReg;
 80008e6:	8a7a      	ldrh	r2, [r7, #18]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	609a      	str	r2, [r3, #8]
	else
	{
		/* Not support I2C_MODE_SMBUS*/
	}
	//Interrupt mode (Slave mode)
	if(I2C_Config->P_Slave_Event_CallBack != NULL) //(Slave mode?)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	69db      	ldr	r3, [r3, #28]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d038      	beq.n	8000966 <MCAL_I2C_Init+0x1ea>
	{
		I2Cx->CR2 |= I2C_CR2_ITERREN;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITEVTEN;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITBUFEN;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	605a      	str	r2, [r3, #4]
		if(I2Cx==I2C1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <MCAL_I2C_Init+0x204>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d10c      	bne.n	800093a <MCAL_I2C_Init+0x1be>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MCAL_I2C_Init+0x218>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <MCAL_I2C_Init+0x218>)
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MCAL_I2C_Init+0x21c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <MCAL_I2C_Init+0x21c>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	e00f      	b.n	800095a <MCAL_I2C_Init+0x1de>
		}
		else if(I2Cx==I2C2)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a13      	ldr	r2, [pc, #76]	; (800098c <MCAL_I2C_Init+0x210>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d10b      	bne.n	800095a <MCAL_I2C_Init+0x1de>
		{
			NVIC_IRQ33_I2C2_EV_Enable;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MCAL_I2C_Init+0x21c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <MCAL_I2C_Init+0x21c>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MCAL_I2C_Init+0x21c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <MCAL_I2C_Init+0x21c>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6013      	str	r3, [r2, #0]

		}
		I2Cx->SR1=0;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
		I2Cx->SR2=0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
	}
	/*
	 * enable the peripheral
	 */
	I2Cx->CR1 |= I2C_CR1_PE ;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f043 0201 	orr.w	r2, r3, #1
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]

}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bdb0      	pop	{r4, r5, r7, pc}
 800097a:	bf00      	nop
 800097c:	007a1200 	.word	0x007a1200
 8000980:	40005400 	.word	0x40005400
 8000984:	2000001c 	.word	0x2000001c
 8000988:	40021000 	.word	0x40021000
 800098c:	40005800 	.word	0x40005800
 8000990:	431bde83 	.word	0x431bde83
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000e104 	.word	0xe000e104

0800099c <MCAL_I2C_GPIO_Set_Pins>:
	}

}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	GPIO_PConfig_t PinCfg;

	if(I2Cx==I2C1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d118      	bne.n	80009de <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		//PB6 : I2C1_SCL -- Alternate function open drain
		PinCfg.GPIO_PinNumber=GPIO_PIN_6;
 80009ac:	2340      	movs	r3, #64	; 0x40
 80009ae:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_OD;
 80009b0:	2307      	movs	r3, #7
 80009b2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	481a      	ldr	r0, [pc, #104]	; (8000a28 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80009c0:	f7ff fe5d 	bl	800067e <MCAL_GPIO_Init>
		//PB7 : I2C1_SDL -- Alternate function open drain
		PinCfg.GPIO_PinNumber=GPIO_PIN_7;
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_OD;
 80009c8:	2307      	movs	r3, #7
 80009ca:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4814      	ldr	r0, [pc, #80]	; (8000a28 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80009d8:	f7ff fe51 	bl	800067e <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber=GPIO_PIN_11;
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_OD;
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
	}
}
 80009dc:	e01d      	b.n	8000a1a <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if(I2Cx==I2C2)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MCAL_I2C_GPIO_Set_Pins+0x90>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d119      	bne.n	8000a1a <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber=GPIO_PIN_10;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_OD;
 80009ec:	2307      	movs	r3, #7
 80009ee:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80009fc:	f7ff fe3f 	bl	800067e <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber=GPIO_PIN_11;
 8000a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a04:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_OD;
 8000a06:	2307      	movs	r3, #7
 8000a08:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000a16:	f7ff fe32 	bl	800067e <MCAL_GPIO_Init>
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40005400 	.word	0x40005400
 8000a28:	40010c00 	.word	0x40010c00
 8000a2c:	40005800 	.word	0x40005800

08000a30 <MCAL_I2C_Master_Tx>:

void MCAL_I2C_Master_Tx(I2C_TypeDef* I2Cx, uint16_t slaveAddress, uint8_t *dataOut, uint32_t dataLen, Stop_Condition stop,Reapeated_Start start)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	817b      	strh	r3, [r7, #10]
	//generate Start condition
	I2C_Generate_Start(I2Cx, Enable, start);
 8000a40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a44:	461a      	mov	r2, r3
 8000a46:	2101      	movs	r1, #1
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f000 f8f5 	bl	8000c38 <I2C_Generate_Start>

	//wait for EV5
	//EV5: SB=1, cleared by reading SR1 register
	while (! I2C_Get_Flag_Status(I2Cx, EV5) );
 8000a4e:	bf00      	nop
 8000a50:	2104      	movs	r1, #4
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f000 f936 	bl	8000cc4 <I2C_Get_Flag_Status>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f8      	beq.n	8000a50 <MCAL_I2C_Master_Tx+0x20>

	//writing DR register with Address
	I2C_SendAddress(I2Cx, slaveAddress, I2C_Direction_Transmitter);
 8000a5e:	897b      	ldrh	r3, [r7, #10]
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f000 f90e 	bl	8000c86 <I2C_SendAddress>

	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!( I2C_Get_Flag_Status(I2Cx, EV6) ) );
 8000a6a:	bf00      	nop
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f000 f928 	bl	8000cc4 <I2C_Get_Flag_Status>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f8      	beq.n	8000a6c <MCAL_I2C_Master_Tx+0x3c>

	//EV8_1: TxE=1, shift register empty, data register empty, Master?, Busy:after send address Communication ongoing on the bus By you?
	while(!( I2C_Get_Flag_Status(I2Cx, Master_Transmitter_Busy_RegisterEmpty) ) );
 8000a7a:	bf00      	nop
 8000a7c:	491a      	ldr	r1, [pc, #104]	; (8000ae8 <MCAL_I2C_Master_Tx+0xb8>)
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f000 f920 	bl	8000cc4 <I2C_Get_Flag_Status>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f8      	beq.n	8000a7c <MCAL_I2C_Master_Tx+0x4c>

	//write Data1 in DR
	uint32_t i=0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
	for(i=0; i<dataLen; i++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e011      	b.n	8000ab8 <MCAL_I2C_Master_Tx+0x88>
	{
		I2Cx->DR=dataOut[i];
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register .
		while(!( I2C_Get_Flag_Status(I2Cx, EV8) ) );
 8000aa2:	bf00      	nop
 8000aa4:	2107      	movs	r1, #7
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f000 f90c 	bl	8000cc4 <I2C_Get_Flag_Status>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0f8      	beq.n	8000aa4 <MCAL_I2C_Master_Tx+0x74>
	for(i=0; i<dataLen; i++)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d3e9      	bcc.n	8000a94 <MCAL_I2C_Master_Tx+0x64>
	}

	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	while(!( I2C_Get_Flag_Status(I2Cx, EV8_2) ) );
 8000ac0:	bf00      	nop
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 f8fd 	bl	8000cc4 <I2C_Get_Flag_Status>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0f8      	beq.n	8000ac2 <MCAL_I2C_Master_Tx+0x92>

	if(stop==With_Stop)
 8000ad0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d103      	bne.n	8000ae0 <MCAL_I2C_Master_Tx+0xb0>
	{
		I2C_GenerateStop(I2Cx,Enable);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f891 	bl	8000c02 <I2C_GenerateStop>
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	00070080 	.word	0x00070080

08000aec <MCAL_I2C_Master_Rx>:

void MCAL_I2C_Master_Rx(I2C_TypeDef* I2Cx, uint16_t slaveAddress, uint8_t *dataOut, uint32_t dataLen, Stop_Condition stop,Reapeated_Start start)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	460b      	mov	r3, r1
 8000afa:	817b      	strh	r3, [r7, #10]
	uint8_t index= I2Cx==I2C1? I2C1_INDEX:I2C2_INDEX;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <MCAL_I2C_Master_Rx+0xd8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	bf14      	ite	ne
 8000b04:	2301      	movne	r3, #1
 8000b06:	2300      	moveq	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	74fb      	strb	r3, [r7, #19]

	//generate Start condition
	I2C_Generate_Start(I2Cx, Enable, start);
 8000b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b10:	461a      	mov	r2, r3
 8000b12:	2101      	movs	r1, #1
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f000 f88f 	bl	8000c38 <I2C_Generate_Start>

	//wait for EV5
	//EV5: SB=1, cleared by reading SR1 register
	while (! (I2C_Get_Flag_Status(I2Cx, EV5)) );
 8000b1a:	bf00      	nop
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f8d0 	bl	8000cc4 <I2C_Get_Flag_Status>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0f8      	beq.n	8000b1c <MCAL_I2C_Master_Rx+0x30>

	//writing DR register with Address
	I2C_SendAddress(I2Cx, slaveAddress, I2C_Direction_Recieve);
 8000b2a:	897b      	ldrh	r3, [r7, #10]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4619      	mov	r1, r3
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f000 f8a8 	bl	8000c86 <I2C_SendAddress>

	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!( I2C_Get_Flag_Status(I2Cx, EV6) ) );
 8000b36:	bf00      	nop
 8000b38:	2105      	movs	r1, #5
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f000 f8c2 	bl	8000cc4 <I2C_Get_Flag_Status>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f8      	beq.n	8000b38 <MCAL_I2C_Master_Rx+0x4c>

	I2C_AcknowledgeConfig(I2Cx,Enable);
 8000b46:	2101      	movs	r1, #1
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f000 f83f 	bl	8000bcc <I2C_AcknowledgeConfig>

	uint32_t i=0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
	//dataLen>0
	if(dataLen)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d01c      	beq.n	8000b92 <MCAL_I2C_Master_Rx+0xa6>
	{
		//until Len becomes zero
		for(i=dataLen; i>0; i--)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e012      	b.n	8000b84 <MCAL_I2C_Master_Rx+0x98>
		{
			//wait until RxNE becomes 1
			while (! (I2C_Get_Flag_Status(I2Cx, EV7)) );
 8000b5e:	bf00      	nop
 8000b60:	2106      	movs	r1, #6
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f000 f8ae 	bl	8000cc4 <I2C_Get_Flag_Status>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f8      	beq.n	8000b60 <MCAL_I2C_Master_Rx+0x74>
			//read the data from data register to buffer
			*dataOut=I2Cx->DR;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			dataOut++;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	607b      	str	r3, [r7, #4]
		for(i=dataLen; i>0; i--)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1e9      	bne.n	8000b5e <MCAL_I2C_Master_Rx+0x72>
		}
		//NACK
		I2C_AcknowledgeConfig(I2Cx,Disable);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f000 f81d 	bl	8000bcc <I2C_AcknowledgeConfig>
	}

	if(stop==With_Stop)
 8000b92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d103      	bne.n	8000ba2 <MCAL_I2C_Master_Rx+0xb6>
	{
		//Send STOP condition
		I2C_GenerateStop(I2Cx,Enable);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f000 f830 	bl	8000c02 <I2C_GenerateStop>
	}
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_ACK_Control_Enable)
 8000ba2:	7cfb      	ldrb	r3, [r7, #19]
 8000ba4:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <MCAL_I2C_Master_Rx+0xdc>)
 8000ba6:	015b      	lsls	r3, r3, #5
 8000ba8:	4413      	add	r3, r2
 8000baa:	330c      	adds	r3, #12
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bb2:	d103      	bne.n	8000bbc <MCAL_I2C_Master_Rx+0xd0>
	{
		I2C_AcknowledgeConfig(I2Cx,Enable);
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f000 f808 	bl	8000bcc <I2C_AcknowledgeConfig>
	}

}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	2000001c 	.word	0x2000001c

08000bcc <I2C_AcknowledgeConfig>:

void I2C_AcknowledgeConfig(I2C_TypeDef *I2Cx  , Functional_State State)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
	/*Bit 10 ACK: Acknowledge enable
	This bit is set and cleared by software and cleared by hardware when PE=0.
	0: No acknowledge returned
	1: Acknowledge returned after a byte is received (matched address or data)*/

	if(State == Enable)
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d106      	bne.n	8000bec <I2C_AcknowledgeConfig+0x20>
	{
		I2Cx->CR1 |=(I2C_CR1_ACK);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
	else
	{
		I2Cx->CR1 &=~(I2C_CR1_ACK);
	}

}
 8000bea:	e005      	b.n	8000bf8 <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &=~(I2C_CR1_ACK);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <I2C_GenerateStop>:

void I2C_GenerateStop(I2C_TypeDef *I2Cx,Functional_State State)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	70fb      	strb	r3, [r7, #3]
	if(State != Disable)
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <I2C_GenerateStop+0x20>
	{
		//Generate a STOP condition
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	601a      	str	r2, [r3, #0]
		//Disable a STOP condition
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}


}
 8000c20:	e005      	b.n	8000c2e <I2C_GenerateStop+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <I2C_Generate_Start>:
void I2C_Generate_Start(I2C_TypeDef* I2Cx,Functional_State Status, Reapeated_Start start)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
 8000c44:	4613      	mov	r3, r2
 8000c46:	70bb      	strb	r3, [r7, #2]
	if(start!=RepeatedStart)
 8000c48:	78bb      	ldrb	r3, [r7, #2]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d007      	beq.n	8000c5e <I2C_Generate_Start+0x26>
	{   //check if Bus is idle
		/************************todo: add timeout (I2CMaster_SetTimeout() )************************/
		while(( I2C_Get_Flag_Status(I2Cx, I2C_Flag_BUSY) ));  //check if Bus is idle
 8000c4e:	bf00      	nop
 8000c50:	2100      	movs	r1, #0
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f836 	bl	8000cc4 <I2C_Get_Flag_Status>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f8      	bne.n	8000c50 <I2C_Generate_Start+0x18>
	}
	if(Status != Disable)
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <I2C_Generate_Start+0x3a>
	{
		//Generate a START condition
		I2Cx->CR1 |= I2C_CR1_START;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]
		//Disable a START condition
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}


}
 8000c70:	e005      	b.n	8000c7e <I2C_Generate_Start+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <I2C_SendAddress>:

//supported only 7bit mode
void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16_t address, I2C_Direction Dir)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	807b      	strh	r3, [r7, #2]
 8000c92:	4613      	mov	r3, r2
 8000c94:	707b      	strb	r3, [r7, #1]
	address= (address << 1);
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	807b      	strh	r3, [r7, #2]
	if(Dir!=I2C_Direction_Transmitter)
 8000c9c:	787b      	ldrb	r3, [r7, #1]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d004      	beq.n	8000cac <I2C_SendAddress+0x26>
	{
		address |= (1<<0);
 8000ca2:	887b      	ldrh	r3, [r7, #2]
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	807b      	strh	r3, [r7, #2]
 8000caa:	e003      	b.n	8000cb4 <I2C_SendAddress+0x2e>
	}
	else
	{
		address &= ~(1<<0);
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	f023 0301 	bic.w	r3, r3, #1
 8000cb2:	807b      	strh	r3, [r7, #2]
	}
	I2Cx->DR=address;
 8000cb4:	887a      	ldrh	r2, [r7, #2]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	611a      	str	r2, [r3, #16]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <I2C_Get_Flag_Status>:

FlagStatus I2C_Get_Flag_Status(I2C_TypeDef* I2Cx,  Status flag)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	FlagStatus bitStatus=Reset;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	77fb      	strb	r3, [r7, #31]
	uint16_t dummyRead;
	switch(flag)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d043      	beq.n	8000d60 <I2C_Get_Flag_Status+0x9c>
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d808      	bhi.n	8000cee <I2C_Get_Flag_Status+0x2a>
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d04b      	beq.n	8000d78 <I2C_Get_Flag_Status+0xb4>
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d313      	bcc.n	8000d0c <I2C_Get_Flag_Status+0x48>
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d01d      	beq.n	8000d24 <I2C_Get_Flag_Status+0x60>
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d027      	beq.n	8000d3c <I2C_Get_Flag_Status+0x78>
 8000cec:	e09a      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d05c      	beq.n	8000dac <I2C_Get_Flag_Status+0xe8>
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d804      	bhi.n	8000d00 <I2C_Get_Flag_Status+0x3c>
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d03e      	beq.n	8000d78 <I2C_Get_Flag_Status+0xb4>
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d04b      	beq.n	8000d96 <I2C_Get_Flag_Status+0xd2>
 8000cfe:	e091      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d05e      	beq.n	8000dc2 <I2C_Get_Flag_Status+0xfe>
 8000d04:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <I2C_Get_Flag_Status+0x16c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d06c      	beq.n	8000de4 <I2C_Get_Flag_Status+0x120>
 8000d0a:	e08b      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
	{
	case I2C_Flag_BUSY:
	{
		if((I2Cx->SR2) & I2C_SR2_BUSY)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <I2C_Get_Flag_Status+0x5a>
		{
			bitStatus=Set;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitStatus=Reset;
		}
		break;
 8000d1c:	e082      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
			bitStatus=Reset;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	77fb      	strb	r3, [r7, #31]
		break;
 8000d22:	e07f      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
	}
	case EV2:
	{
		if((I2Cx->SR1) & I2C_SR1_RXNE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <I2C_Get_Flag_Status+0x72>
		{
			bitStatus=Set;
 8000d30:	2301      	movs	r3, #1
 8000d32:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitStatus=Reset;
		}
		break;
 8000d34:	e076      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
			bitStatus=Reset;
 8000d36:	2300      	movs	r3, #0
 8000d38:	77fb      	strb	r3, [r7, #31]
		break;
 8000d3a:	e073      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
	}
	case EV4:
	{
		if(I2Cx->SR1 & I2C_SR1_STOPF)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <I2C_Get_Flag_Status+0x8a>
		{
			bitStatus=Set;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	77fb      	strb	r3, [r7, #31]
 8000d4c:	e001      	b.n	8000d52 <I2C_Get_Flag_Status+0x8e>
		}
		else
		{
			bitStatus=Reset;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	77fb      	strb	r3, [r7, #31]
		}
		I2Cx->CR1 |=I2C_CR1_STOP;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	601a      	str	r2, [r3, #0]
		break;
 8000d5e:	e061      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
	}
	case EV5:
	{
		if(I2Cx->SR1 & I2C_SR1_SB)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <I2C_Get_Flag_Status+0xae>
		{
			bitStatus=Set;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitStatus=Reset;
		}
		break;
 8000d70:	e058      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
			bitStatus=Reset;
 8000d72:	2300      	movs	r3, #0
 8000d74:	77fb      	strb	r3, [r7, #31]
		break;
 8000d76:	e055      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
	}
	case EV1:
	case EV6:
	{
		if(I2Cx->SR1 & I2C_SR1_ADDR)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <I2C_Get_Flag_Status+0xc6>
		{
			bitStatus=Set;
 8000d84:	2301      	movs	r3, #1
 8000d86:	77fb      	strb	r3, [r7, #31]
 8000d88:	e001      	b.n	8000d8e <I2C_Get_Flag_Status+0xca>
		}
		else
		{
			bitStatus=Reset;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	77fb      	strb	r3, [r7, #31]
		}
		//by reading SR2
		dummyRead=(I2Cx->SR2);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	81fb      	strh	r3, [r7, #14]
		break;
 8000d94:	e046      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>

	}
	case EV7:
	{
		if(I2Cx->SR1 & I2C_SR1_RXNE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <I2C_Get_Flag_Status+0xe4>
		{
			bitStatus=Set;
 8000da2:	2301      	movs	r3, #1
 8000da4:	77fb      	strb	r3, [r7, #31]
 8000da6:	e001      	b.n	8000dac <I2C_Get_Flag_Status+0xe8>
		}
		else
		{
			bitStatus=Reset;
 8000da8:	2300      	movs	r3, #0
 8000daa:	77fb      	strb	r3, [r7, #31]
		}
	}
	case EV8:
	{
		if(I2Cx->SR1 & I2C_SR1_TXE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d002      	beq.n	8000dbe <I2C_Get_Flag_Status+0xfa>
		{
			bitStatus=Set;
 8000db8:	2301      	movs	r3, #1
 8000dba:	77fb      	strb	r3, [r7, #31]
 8000dbc:	e001      	b.n	8000dc2 <I2C_Get_Flag_Status+0xfe>
		}
		else
		{
			bitStatus=Reset;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	77fb      	strb	r3, [r7, #31]
		}
	}
	case EV8_2:
	{
		if((I2Cx->SR1 & I2C_SR1_TXE) && (I2Cx->SR1 & I2C_SR1_BTF))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d008      	beq.n	8000de0 <I2C_Get_Flag_Status+0x11c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <I2C_Get_Flag_Status+0x11c>
		{
			bitStatus=Set;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	77fb      	strb	r3, [r7, #31]
 8000dde:	e001      	b.n	8000de4 <I2C_Get_Flag_Status+0x120>
		}
		else
		{
			bitStatus=Reset;
 8000de0:	2300      	movs	r3, #0
 8000de2:	77fb      	strb	r3, [r7, #31]
		}
	}
	case Master_Transmitter_Busy_RegisterEmpty:
	{
		uint32_t flag1=0, flag2=0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
		uint32_t lastEvent=0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
		flag1= I2Cx->SR1;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	61bb      	str	r3, [r7, #24]
		flag2= I2Cx->SR2;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	617b      	str	r3, [r7, #20]
		flag2= flag2 << 16;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	041b      	lsls	r3, r3, #16
 8000e00:	617b      	str	r3, [r7, #20]
		lastEvent=(flag1 | flag2) & ((uint32_t)0x00FFFFFF);
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e0c:	613b      	str	r3, [r7, #16]

		//flag = Master_Transmitter_Busy_RegisterEmpty
		if((lastEvent & flag) == flag)	/* flag =  0x00070080UL */
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	4013      	ands	r3, r2
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d102      	bne.n	8000e20 <I2C_Get_Flag_Status+0x15c>
		{
			bitStatus=Set;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	77fb      	strb	r3, [r7, #31]
 8000e1e:	e001      	b.n	8000e24 <I2C_Get_Flag_Status+0x160>
		}
		else
		{
			bitStatus=Reset;
 8000e20:	2300      	movs	r3, #0
 8000e22:	77fb      	strb	r3, [r7, #31]
		}
	}
	}
	return bitStatus;
 8000e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	00070080 	.word	0x00070080

08000e34 <MCAL_RCC_GetSYSFreq>:
//Caution: The AHB clock frequency must be at least 25 MHz when the Ethernet is used.

const uint8_t AHB_PrescTable[16U]={0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};  //shift right

uint32_t MCAL_RCC_GetSYSFreq(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	switch ((RCC->CFGR >> 2) & 0b11)
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MCAL_RCC_GetSYSFreq+0x30>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d006      	beq.n	8000e54 <MCAL_RCC_GetSYSFreq+0x20>
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d302      	bcc.n	8000e50 <MCAL_RCC_GetSYSFreq+0x1c>
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d004      	beq.n	8000e58 <MCAL_RCC_GetSYSFreq+0x24>
 8000e4e:	e005      	b.n	8000e5c <MCAL_RCC_GetSYSFreq+0x28>
	{
	case 0: return HSI_RC_CLK; break;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <MCAL_RCC_GetSYSFreq+0x34>)
 8000e52:	e003      	b.n	8000e5c <MCAL_RCC_GetSYSFreq+0x28>
	case 1: return HSE_CLK   ; break;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <MCAL_RCC_GetSYSFreq+0x38>)
 8000e56:	e001      	b.n	8000e5c <MCAL_RCC_GetSYSFreq+0x28>
	case 2: return 16000000  ; break;
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <MCAL_RCC_GetSYSFreq+0x38>)
 8000e5a:	e7ff      	b.n	8000e5c <MCAL_RCC_GetSYSFreq+0x28>

	}
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	007a1200 	.word	0x007a1200
 8000e6c:	00f42400 	.word	0x00f42400

08000e70 <MCAL_RCC_GetHCLFreq>:
uint32_t MCAL_RCC_GetHCLFreq(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	//Bits 7:4 HPR: AHB prescaler
	return ( MCAL_RCC_GetSYSFreq() >> AHB_PrescTable[ ((RCC->CFGR >>4) & 0xF) ] );
 8000e74:	f7ff ffde 	bl	8000e34 <MCAL_RCC_GetSYSFreq>
 8000e78:	4601      	mov	r1, r0
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <MCAL_RCC_GetHCLFreq+0x20>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	091b      	lsrs	r3, r3, #4
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <MCAL_RCC_GetHCLFreq+0x24>)
 8000e86:	5cd3      	ldrb	r3, [r2, r3]
 8000e88:	fa21 f303 	lsr.w	r3, r1, r3


}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	08000fa4 	.word	0x08000fa4

08000e98 <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB high-speed prescaler (APB1)
	return ( MCAL_RCC_GetHCLFreq() >> APB1_PrescTable[ ((RCC->CFGR>>8) & 0b111) ] );
 8000e9c:	f7ff ffe8 	bl	8000e70 <MCAL_RCC_GetHCLFreq>
 8000ea0:	4601      	mov	r1, r0
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000eae:	5cd3      	ldrb	r3, [r2, r3]
 8000eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	08000f9c 	.word	0x08000f9c

08000ec0 <SPI1_IRQHandler>:
 *                         IRQ
 * ===========================================================
 */

void SPI1_IRQHandler (void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SPI1_IRQHandler+0x18>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	7938      	ldrb	r0, [r7, #4]
 8000ece:	4798      	blx	r3

}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000005c 	.word	0x2000005c

08000edc <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SPI2_IRQHandler+0x18>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	7938      	ldrb	r0, [r7, #4]
 8000eea:	4798      	blx	r3
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000005c 	.word	0x2000005c

08000ef8 <USART1_IRQHandler>:

}

//ISR
void USART1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <USART1_IRQHandler+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	4798      	blx	r3
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000064 	.word	0x20000064

08000f0c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <USART2_IRQHandler+0x10>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	4798      	blx	r3
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000064 	.word	0x20000064

08000f20 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <USART3_IRQHandler+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	4798      	blx	r3
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000064 	.word	0x20000064

08000f34 <__libc_init_array>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	2500      	movs	r5, #0
 8000f38:	4e0c      	ldr	r6, [pc, #48]	; (8000f6c <__libc_init_array+0x38>)
 8000f3a:	4c0d      	ldr	r4, [pc, #52]	; (8000f70 <__libc_init_array+0x3c>)
 8000f3c:	1ba4      	subs	r4, r4, r6
 8000f3e:	10a4      	asrs	r4, r4, #2
 8000f40:	42a5      	cmp	r5, r4
 8000f42:	d109      	bne.n	8000f58 <__libc_init_array+0x24>
 8000f44:	f000 f81a 	bl	8000f7c <_init>
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4e0a      	ldr	r6, [pc, #40]	; (8000f74 <__libc_init_array+0x40>)
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	; (8000f78 <__libc_init_array+0x44>)
 8000f4e:	1ba4      	subs	r4, r4, r6
 8000f50:	10a4      	asrs	r4, r4, #2
 8000f52:	42a5      	cmp	r5, r4
 8000f54:	d105      	bne.n	8000f62 <__libc_init_array+0x2e>
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f5c:	4798      	blx	r3
 8000f5e:	3501      	adds	r5, #1
 8000f60:	e7ee      	b.n	8000f40 <__libc_init_array+0xc>
 8000f62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f66:	4798      	blx	r3
 8000f68:	3501      	adds	r5, #1
 8000f6a:	e7f2      	b.n	8000f52 <__libc_init_array+0x1e>
 8000f6c:	08000fb4 	.word	0x08000fb4
 8000f70:	08000fb4 	.word	0x08000fb4
 8000f74:	08000fb4 	.word	0x08000fb4
 8000f78:	08000fb8 	.word	0x08000fb8

08000f7c <_init>:
 8000f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7e:	bf00      	nop
 8000f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f82:	bc08      	pop	{r3}
 8000f84:	469e      	mov	lr, r3
 8000f86:	4770      	bx	lr

08000f88 <_fini>:
 8000f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8a:	bf00      	nop
 8000f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8e:	bc08      	pop	{r3}
 8000f90:	469e      	mov	lr, r3
 8000f92:	4770      	bx	lr
