
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ce4  08000ce4  00010ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cf0  08000cf0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000cf0  08000cf0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cf0  08000cf0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cf0  08000cf0  00010cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cf4  08000cf4  00010cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000020  08000d18  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000d18  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ce8  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000972  00000000  00000000  00023d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a1c  00000000  00000000  000246a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  000250c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00025288  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000024d3  00000000  00000000  000253f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000020df  00000000  00000000  000278cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000094fe  00000000  00000000  000299aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00032ea8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000570  00000000  00000000  00032f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ccc 	.word	0x08000ccc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000ccc 	.word	0x08000ccc

08000170 <clock_init>:
#include "lcd_driver.h"
#include "keypad_driver.h"


void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// TO ENABLE CLOCK SIGNAL FOR GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	// TO ENABLE CLOCK SIGNAL FOR GPIOB
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <del_ms>:

void del_ms(uint32_t time)
{
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	int i , j;
	for(i=0 ; i<time ; i++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
 80001a4:	e00b      	b.n	80001be <del_ms+0x26>
		for(j=0 ; j<255 ; j++);
 80001a6:	2300      	movs	r3, #0
 80001a8:	60bb      	str	r3, [r7, #8]
 80001aa:	e002      	b.n	80001b2 <del_ms+0x1a>
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	3301      	adds	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	2bfe      	cmp	r3, #254	; 0xfe
 80001b6:	ddf9      	ble.n	80001ac <del_ms+0x14>
	for(i=0 ; i<time ; i++)
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	3301      	adds	r3, #1
 80001bc:	60fb      	str	r3, [r7, #12]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d8ef      	bhi.n	80001a6 <del_ms+0xe>
}
 80001c6:	bf00      	nop
 80001c8:	3714      	adds	r7, #20
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <main>:

int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
	clock_init();
 80001d6:	f7ff ffcb 	bl	8000170 <clock_init>
	LCD_INIT();
 80001da:	f000 fc81 	bl	8000ae0 <LCD_INIT>
	LCD_WRITE_STRING("HEY THERE..");
 80001de:	480f      	ldr	r0, [pc, #60]	; (800021c <main+0x4c>)
 80001e0:	f000 fcdc 	bl	8000b9c <LCD_WRITE_STRING>
	del_ms(300);
 80001e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80001e8:	f7ff ffd6 	bl	8000198 <del_ms>
	LCD_clear_screen();
 80001ec:	f000 fd18 	bl	8000c20 <LCD_clear_screen>

	Keypad_Init();
 80001f0:	f000 fa76 	bl	80006e0 <Keypad_Init>
	unsigned char key_pressed;

	while(1){

		key_pressed = Keypad_ScanKey();
 80001f4:	f000 faea 	bl	80007cc <Keypad_ScanKey>
 80001f8:	4603      	mov	r3, r0
 80001fa:	71fb      	strb	r3, [r7, #7]
		switch(key_pressed){
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	2b41      	cmp	r3, #65	; 0x41
 8000200:	d009      	beq.n	8000216 <main+0x46>
 8000202:	2b63      	cmp	r3, #99	; 0x63
 8000204:	d102      	bne.n	800020c <main+0x3c>
			case 'A':
				break;
			case 'c':
				LCD_clear_screen();
 8000206:	f000 fd0b 	bl	8000c20 <LCD_clear_screen>
				break;
 800020a:	e005      	b.n	8000218 <main+0x48>
			default:
				LCD_WRITE_CHAR(key_pressed);
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fca2 	bl	8000b58 <LCD_WRITE_CHAR>
				break;
 8000214:	e000      	b.n	8000218 <main+0x48>
				break;
 8000216:	bf00      	nop
		key_pressed = Keypad_ScanKey();
 8000218:	e7ec      	b.n	80001f4 <main+0x24>
 800021a:	bf00      	nop
 800021c:	08000ce4 	.word	0x08000ce4

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000224:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 fd19 	bl	8000c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ffbd 	bl	80001d0 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000264:	08000cf8 	.word	0x08000cf8
  ldr r2, =_sbss
 8000268:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800026c:	2000007c 	.word	0x2000007c

08000270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_2_IRQHandler>
	...

08000274 <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <EXTI0_IRQHandler+0x1c>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4a04      	ldr	r2, [pc, #16]	; (8000290 <EXTI0_IRQHandler+0x1c>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <EXTI0_IRQHandler+0x20>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4798      	blx	r3
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40010400 	.word	0x40010400
 8000294:	2000003c 	.word	0x2000003c

08000298 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <EXTI1_IRQHandler+0x1c>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <EXTI1_IRQHandler+0x1c>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <EXTI1_IRQHandler+0x20>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4798      	blx	r3
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40010400 	.word	0x40010400
 80002b8:	2000003c 	.word	0x2000003c

080002bc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI2_IRQHandler+0x1c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI2_IRQHandler+0x1c>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI2_IRQHandler+0x20>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	4798      	blx	r3
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010400 	.word	0x40010400
 80002dc:	2000003c 	.word	0x2000003c

080002e0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <EXTI3_IRQHandler+0x1c>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <EXTI3_IRQHandler+0x1c>)
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 80002f0:	4b03      	ldr	r3, [pc, #12]	; (8000300 <EXTI3_IRQHandler+0x20>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4798      	blx	r3
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010400 	.word	0x40010400
 8000300:	2000003c 	.word	0x2000003c

08000304 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <EXTI4_IRQHandler+0x1c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <EXTI4_IRQHandler+0x1c>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <EXTI4_IRQHandler+0x20>)
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	4798      	blx	r3
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010400 	.word	0x40010400
 8000324:	2000003c 	.word	0x2000003c

08000328 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 800032c:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d008      	beq.n	800034a <EXTI9_5_IRQHandler+0x22>
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a22      	ldr	r2, [pc, #136]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6153      	str	r3, [r2, #20]
 8000344:	4b21      	ldr	r3, [pc, #132]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000352:	2b00      	cmp	r3, #0
 8000354:	d008      	beq.n	8000368 <EXTI9_5_IRQHandler+0x40>
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a1b      	ldr	r2, [pc, #108]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800035c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000370:	2b00      	cmp	r3, #0
 8000372:	d008      	beq.n	8000386 <EXTI9_5_IRQHandler+0x5e>
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037e:	6153      	str	r3, [r2, #20]
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 8000382:	69db      	ldr	r3, [r3, #28]
 8000384:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800038e:	2b00      	cmp	r3, #0
 8000390:	d008      	beq.n	80003a4 <EXTI9_5_IRQHandler+0x7c>
 8000392:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 8000398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 80003a0:	6a1b      	ldr	r3, [r3, #32]
 80003a2:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d008      	beq.n	80003c2 <EXTI9_5_IRQHandler+0x9a>
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <EXTI9_5_IRQHandler+0xa0>)
 80003b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ba:	6153      	str	r3, [r2, #20]
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <EXTI9_5_IRQHandler+0xa4>)
 80003be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c0:	4798      	blx	r3

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40010400 	.word	0x40010400
 80003cc:	2000003c 	.word	0x2000003c

080003d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 80003d4:	4b2d      	ldr	r3, [pc, #180]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d008      	beq.n	80003f2 <EXTI15_10_IRQHandler+0x22>
 80003e0:	4b2a      	ldr	r3, [pc, #168]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a29      	ldr	r2, [pc, #164]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 80003e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ea:	6153      	str	r3, [r2, #20]
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 80003ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f0:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 80003f2:	4b26      	ldr	r3, [pc, #152]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d008      	beq.n	8000410 <EXTI15_10_IRQHandler+0x40>
 80003fe:	4b23      	ldr	r3, [pc, #140]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a22      	ldr	r2, [pc, #136]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b21      	ldr	r3, [pc, #132]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 800040c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040e:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000418:	2b00      	cmp	r3, #0
 800041a:	d008      	beq.n	800042e <EXTI15_10_IRQHandler+0x5e>
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	4a1a      	ldr	r2, [pc, #104]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000426:	6153      	str	r3, [r2, #20]
 8000428:	4b19      	ldr	r3, [pc, #100]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000436:	2b00      	cmp	r3, #0
 8000438:	d008      	beq.n	800044c <EXTI15_10_IRQHandler+0x7c>
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 8000448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800044a:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000454:	2b00      	cmp	r3, #0
 8000456:	d008      	beq.n	800046a <EXTI15_10_IRQHandler+0x9a>
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a0b      	ldr	r2, [pc, #44]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	6153      	str	r3, [r2, #20]
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 8000466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000468:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000472:	2b00      	cmp	r3, #0
 8000474:	d008      	beq.n	8000488 <EXTI15_10_IRQHandler+0xb8>
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a04      	ldr	r2, [pc, #16]	; (800048c <EXTI15_10_IRQHandler+0xbc>)
 800047c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b03      	ldr	r3, [pc, #12]	; (8000490 <EXTI15_10_IRQHandler+0xc0>)
 8000484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000486:	4798      	blx	r3

}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010400 	.word	0x40010400
 8000490:	2000003c 	.word	0x2000003c

08000494 <Get_CRLH_Position>:
 *      Author: ahmed osama
 */
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800049e:	88fb      	ldrh	r3, [r7, #6]
 80004a0:	2b80      	cmp	r3, #128	; 0x80
 80004a2:	d042      	beq.n	800052a <Get_CRLH_Position+0x96>
 80004a4:	2b80      	cmp	r3, #128	; 0x80
 80004a6:	dc11      	bgt.n	80004cc <Get_CRLH_Position+0x38>
 80004a8:	2b08      	cmp	r3, #8
 80004aa:	d036      	beq.n	800051a <Get_CRLH_Position+0x86>
 80004ac:	2b08      	cmp	r3, #8
 80004ae:	dc06      	bgt.n	80004be <Get_CRLH_Position+0x2a>
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d02e      	beq.n	8000512 <Get_CRLH_Position+0x7e>
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d02e      	beq.n	8000516 <Get_CRLH_Position+0x82>
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d028      	beq.n	800050e <Get_CRLH_Position+0x7a>
 80004bc:	e047      	b.n	800054e <Get_CRLH_Position+0xba>
 80004be:	2b20      	cmp	r3, #32
 80004c0:	d02f      	beq.n	8000522 <Get_CRLH_Position+0x8e>
 80004c2:	2b40      	cmp	r3, #64	; 0x40
 80004c4:	d02f      	beq.n	8000526 <Get_CRLH_Position+0x92>
 80004c6:	2b10      	cmp	r3, #16
 80004c8:	d029      	beq.n	800051e <Get_CRLH_Position+0x8a>
 80004ca:	e040      	b.n	800054e <Get_CRLH_Position+0xba>
 80004cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004d0:	d033      	beq.n	800053a <Get_CRLH_Position+0xa6>
 80004d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004d6:	dc09      	bgt.n	80004ec <Get_CRLH_Position+0x58>
 80004d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004dc:	d029      	beq.n	8000532 <Get_CRLH_Position+0x9e>
 80004de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004e2:	d028      	beq.n	8000536 <Get_CRLH_Position+0xa2>
 80004e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004e8:	d021      	beq.n	800052e <Get_CRLH_Position+0x9a>
 80004ea:	e030      	b.n	800054e <Get_CRLH_Position+0xba>
 80004ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f0:	d027      	beq.n	8000542 <Get_CRLH_Position+0xae>
 80004f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f6:	dc03      	bgt.n	8000500 <Get_CRLH_Position+0x6c>
 80004f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004fc:	d01f      	beq.n	800053e <Get_CRLH_Position+0xaa>
 80004fe:	e026      	b.n	800054e <Get_CRLH_Position+0xba>
 8000500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000504:	d01f      	beq.n	8000546 <Get_CRLH_Position+0xb2>
 8000506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800050a:	d01e      	beq.n	800054a <Get_CRLH_Position+0xb6>
 800050c:	e01f      	b.n	800054e <Get_CRLH_Position+0xba>
	{
		case GPIO_PIN_0 : return 0;  break;
 800050e:	2300      	movs	r3, #0
 8000510:	e01e      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_1 : return 4;  break;
 8000512:	2304      	movs	r3, #4
 8000514:	e01c      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_2 : return 8;  break;
 8000516:	2308      	movs	r3, #8
 8000518:	e01a      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_3 : return 12; break;
 800051a:	230c      	movs	r3, #12
 800051c:	e018      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_4 : return 16; break;
 800051e:	2310      	movs	r3, #16
 8000520:	e016      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_5 : return 20; break;
 8000522:	2314      	movs	r3, #20
 8000524:	e014      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_6 : return 24; break;
 8000526:	2318      	movs	r3, #24
 8000528:	e012      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_7 : return 28; break;
 800052a:	231c      	movs	r3, #28
 800052c:	e010      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_8 : return 0;  break;
 800052e:	2300      	movs	r3, #0
 8000530:	e00e      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_9 : return 4;  break;
 8000532:	2304      	movs	r3, #4
 8000534:	e00c      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_10: return 8;  break;
 8000536:	2308      	movs	r3, #8
 8000538:	e00a      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_11: return 12; break;
 800053a:	230c      	movs	r3, #12
 800053c:	e008      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_12: return 16; break;
 800053e:	2310      	movs	r3, #16
 8000540:	e006      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_13: return 20; break;
 8000542:	2314      	movs	r3, #20
 8000544:	e004      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_14: return 24; break;
 8000546:	2318      	movs	r3, #24
 8000548:	e002      	b.n	8000550 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_15: return 28; break;
 800054a:	231c      	movs	r3, #28
 800054c:	e000      	b.n	8000550 <Get_CRLH_Position+0xbc>
	}
	return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <MCAL_GPIO_Init>:

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PConfig_t* PinConfig)
{
 800055a:	b590      	push	{r4, r7, lr}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t PIN_Config=0;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 to 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 to 15
	volatile uint32_t* Config_Register=NULL;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
	Config_Register= (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	2bff      	cmp	r3, #255	; 0xff
 8000572:	d801      	bhi.n	8000578 <MCAL_GPIO_Init+0x1e>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	e001      	b.n	800057c <MCAL_GPIO_Init+0x22>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3304      	adds	r3, #4
 800057c:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[0:0]
	*(Config_Register) &= ~ (0xf<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff86 	bl	8000494 <Get_CRLH_Position>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	230f      	movs	r3, #15
 800058e:	4093      	lsls	r3, r2
 8000590:	43da      	mvns	r2, r3
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	401a      	ands	r2, r3
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	601a      	str	r2, [r3, #0]

	//if pin is output
	if(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD ||  PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD  )
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d00b      	beq.n	80005bc <MCAL_GPIO_Init+0x62>
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	d007      	beq.n	80005bc <MCAL_GPIO_Init+0x62>
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	2b06      	cmp	r3, #6
 80005b2:	d003      	beq.n	80005bc <MCAL_GPIO_Init+0x62>
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	2b07      	cmp	r3, #7
 80005ba:	d10e      	bne.n	80005da <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1:0]
		PIN_Config =( (((PinConfig->GPIO_MODE - 4) << 2 )| (PinConfig->GPIO_Output_SPeed)) & 0x0F);
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	3b04      	subs	r3, #4
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	b25a      	sxtb	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	78db      	ldrb	r3, [r3, #3]
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	4313      	orrs	r3, r2
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	e02c      	b.n	8000634 <MCAL_GPIO_Init+0xda>
	}

	//if pin is input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE==GPIO_MODE_Analog || PinConfig->GPIO_MODE==GPIO_MODE_INPUT_FLO)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d003      	beq.n	80005ea <MCAL_GPIO_Init+0x90>
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	789b      	ldrb	r3, [r3, #2]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d107      	bne.n	80005fa <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2 )| 0x0) & 0x0F);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 030f 	and.w	r3, r3, #15
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e01c      	b.n	8000634 <MCAL_GPIO_Init+0xda>

		}
		else if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_AF)                   //consider it input floating
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d102      	bne.n	8000608 <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_FLO) << 2 )| (0x0)) & 0x0F);
 8000602:	2304      	movs	r3, #4
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	e015      	b.n	8000634 <MCAL_GPIO_Init+0xda>

		}
		else
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2 )| (0x0)) & 0x0F);
 8000608:	2308      	movs	r3, #8
 800060a:	73fb      	strb	r3, [r7, #15]
			//PD or PP
			if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_PU)
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d107      	bne.n	8000624 <MCAL_GPIO_Init+0xca>
			{
				//in Table 20. port bit configuration table set PxODR 1 for input pull_up
				GPIOx->ODR |=  PinConfig->GPIO_PinNumber;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	8812      	ldrh	r2, [r2, #0]
 800061c:	431a      	orrs	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	e007      	b.n	8000634 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//in Table 20. port bit configuration table set PxODR 0 for input pull_down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	8812      	ldrh	r2, [r2, #0]
 800062c:	43d2      	mvns	r2, r2
 800062e:	401a      	ands	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	*(Config_Register) |= PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 8000634:	7bfc      	ldrb	r4, [r7, #15]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff2a 	bl	8000494 <Get_CRLH_Position>
 8000640:	4603      	mov	r3, r0
 8000642:	fa04 f203 	lsl.w	r2, r4, r3
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	431a      	orrs	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	601a      	str	r2, [r3, #0]

}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	bd90      	pop	{r4, r7, pc}

08000658 <MCAL_GPIO_ReadPin>:
		RCC->APB2RSTR &= ~ (1<<6);
	}

}
uint8_t MCAL_GPIO_ReadPin  (GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if( (GPIOx->IDR & PinNumber) != (uint32_t) GPIO_PIN_RESET)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	4013      	ands	r3, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_SET;
 8000670:	2301      	movs	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e001      	b.n	800067a <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitStatus = GPIO_PIN_RESET;
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 800067a:	7bfb      	ldrb	r3, [r7, #15]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <MCAL_GPIO_WritePin>:
	uint16_t PortStatus;
	PortStatus = (uint16_t)GPIOx->IDR;
	return PortStatus;
}
void MCAL_GPIO_WritePin  (GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t value)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	460b      	mov	r3, r1
 8000690:	807b      	strh	r3, [r7, #2]
 8000692:	4613      	mov	r3, r2
 8000694:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET)
 8000696:	787b      	ldrb	r3, [r7, #1]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |= PinNumber;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	68da      	ldr	r2, [r3, #12]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	431a      	orrs	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	60da      	str	r2, [r3, #12]
	else
	{
		GPIOx->ODR &= ~ PinNumber;
	}

}
 80006a8:	e006      	b.n	80006b8 <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~ PinNumber;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	887a      	ldrh	r2, [r7, #2]
 80006b0:	43d2      	mvns	r2, r2
 80006b2:	401a      	ands	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60da      	str	r2, [r3, #12]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <MCAL_GPIO_WritePort>:
void MCAL_GPIO_WritePort  (GPIO_TypeDef *GPIOx, uint16_t value)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	460b      	mov	r3, r1
 80006cc:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR= (uint32_t)value;
 80006ce:	887a      	ldrh	r2, [r7, #2]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	60da      	str	r2, [r3, #12]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
	...

080006e0 <Keypad_Init>:
GPIO_PConfig_t PinCfg;

int Keypad_Row[] = {R0, R1, R2, R3}; //rows of the keypad
int Keypad_Col[] = {C0, C1, C2, C3}; //columns of the keypad

void Keypad_Init(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	    //set rows output
		PinCfg.GPIO_PinNumber=R0;
 80006e4:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <Keypad_Init+0xe4>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80006ea:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <Keypad_Init+0xe4>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80006f0:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <Keypad_Init+0xe4>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80006f6:	4933      	ldr	r1, [pc, #204]	; (80007c4 <Keypad_Init+0xe4>)
 80006f8:	4833      	ldr	r0, [pc, #204]	; (80007c8 <Keypad_Init+0xe8>)
 80006fa:	f7ff ff2e 	bl	800055a <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber=R1;
 80006fe:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <Keypad_Init+0xe4>)
 8000700:	2202      	movs	r2, #2
 8000702:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <Keypad_Init+0xe4>)
 8000706:	2204      	movs	r2, #4
 8000708:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <Keypad_Init+0xe4>)
 800070c:	2201      	movs	r2, #1
 800070e:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000710:	492c      	ldr	r1, [pc, #176]	; (80007c4 <Keypad_Init+0xe4>)
 8000712:	482d      	ldr	r0, [pc, #180]	; (80007c8 <Keypad_Init+0xe8>)
 8000714:	f7ff ff21 	bl	800055a <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber=R2;
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <Keypad_Init+0xe4>)
 800071a:	2208      	movs	r2, #8
 800071c:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <Keypad_Init+0xe4>)
 8000720:	2204      	movs	r2, #4
 8000722:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <Keypad_Init+0xe4>)
 8000726:	2201      	movs	r2, #1
 8000728:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800072a:	4926      	ldr	r1, [pc, #152]	; (80007c4 <Keypad_Init+0xe4>)
 800072c:	4826      	ldr	r0, [pc, #152]	; (80007c8 <Keypad_Init+0xe8>)
 800072e:	f7ff ff14 	bl	800055a <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber=R3;
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <Keypad_Init+0xe4>)
 8000734:	2210      	movs	r2, #16
 8000736:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <Keypad_Init+0xe4>)
 800073a:	2204      	movs	r2, #4
 800073c:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <Keypad_Init+0xe4>)
 8000740:	2201      	movs	r2, #1
 8000742:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000744:	491f      	ldr	r1, [pc, #124]	; (80007c4 <Keypad_Init+0xe4>)
 8000746:	4820      	ldr	r0, [pc, #128]	; (80007c8 <Keypad_Init+0xe8>)
 8000748:	f7ff ff07 	bl	800055a <MCAL_GPIO_Init>

		//set columns input
		PinCfg.GPIO_PinNumber=C0;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <Keypad_Init+0xe4>)
 800074e:	2220      	movs	r2, #32
 8000750:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <Keypad_Init+0xe4>)
 8000754:	2204      	movs	r2, #4
 8000756:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <Keypad_Init+0xe4>)
 800075a:	2201      	movs	r2, #1
 800075c:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800075e:	4919      	ldr	r1, [pc, #100]	; (80007c4 <Keypad_Init+0xe4>)
 8000760:	4819      	ldr	r0, [pc, #100]	; (80007c8 <Keypad_Init+0xe8>)
 8000762:	f7ff fefa 	bl	800055a <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber=C1;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <Keypad_Init+0xe4>)
 8000768:	2240      	movs	r2, #64	; 0x40
 800076a:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <Keypad_Init+0xe4>)
 800076e:	2204      	movs	r2, #4
 8000770:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <Keypad_Init+0xe4>)
 8000774:	2201      	movs	r2, #1
 8000776:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000778:	4912      	ldr	r1, [pc, #72]	; (80007c4 <Keypad_Init+0xe4>)
 800077a:	4813      	ldr	r0, [pc, #76]	; (80007c8 <Keypad_Init+0xe8>)
 800077c:	f7ff feed 	bl	800055a <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber=C2;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <Keypad_Init+0xe4>)
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <Keypad_Init+0xe4>)
 8000788:	2204      	movs	r2, #4
 800078a:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <Keypad_Init+0xe4>)
 800078e:	2201      	movs	r2, #1
 8000790:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000792:	490c      	ldr	r1, [pc, #48]	; (80007c4 <Keypad_Init+0xe4>)
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <Keypad_Init+0xe8>)
 8000796:	f7ff fee0 	bl	800055a <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber=C3;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <Keypad_Init+0xe4>)
 800079c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a0:	801a      	strh	r2, [r3, #0]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <Keypad_Init+0xe4>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	709a      	strb	r2, [r3, #2]
		PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <Keypad_Init+0xe4>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <Keypad_Init+0xe4>)
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <Keypad_Init+0xe8>)
 80007b2:	f7ff fed2 	bl	800055a <MCAL_GPIO_Init>

		MCAL_GPIO_WritePort(KEYPAD_PORT, 0x1FF);
 80007b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80007ba:	4803      	ldr	r0, [pc, #12]	; (80007c8 <Keypad_Init+0xe8>)
 80007bc:	f7ff ff81 	bl	80006c2 <MCAL_GPIO_WritePort>

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000078 	.word	0x20000078
 80007c8:	40010c00 	.word	0x40010c00

080007cc <Keypad_ScanKey>:


char Keypad_ScanKey()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

	uint32_t row=0,col=0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
		for (row = 0;row < 4; row++)
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	e0a8      	b.n	8000932 <Keypad_ScanKey+0x166>
		{
			MCAL_GPIO_WritePin(KEYPAD_PORT, R0, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4857      	ldr	r0, [pc, #348]	; (8000944 <Keypad_ScanKey+0x178>)
 80007e6:	f7ff ff4e 	bl	8000686 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(KEYPAD_PORT, R1, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2102      	movs	r1, #2
 80007ee:	4855      	ldr	r0, [pc, #340]	; (8000944 <Keypad_ScanKey+0x178>)
 80007f0:	f7ff ff49 	bl	8000686 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(KEYPAD_PORT, R2, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2108      	movs	r1, #8
 80007f8:	4852      	ldr	r0, [pc, #328]	; (8000944 <Keypad_ScanKey+0x178>)
 80007fa:	f7ff ff44 	bl	8000686 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(KEYPAD_PORT, R3, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2110      	movs	r1, #16
 8000802:	4850      	ldr	r0, [pc, #320]	; (8000944 <Keypad_ScanKey+0x178>)
 8000804:	f7ff ff3f 	bl	8000686 <MCAL_GPIO_WritePin>

			MCAL_GPIO_WritePin(KEYPAD_PORT, Keypad_Row[row], GPIO_PIN_RESET);
 8000808:	4a4f      	ldr	r2, [pc, #316]	; (8000948 <Keypad_ScanKey+0x17c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000810:	b29b      	uxth	r3, r3
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	484b      	ldr	r0, [pc, #300]	; (8000944 <Keypad_ScanKey+0x178>)
 8000818:	f7ff ff35 	bl	8000686 <MCAL_GPIO_WritePin>

			for(col = 0;col < 4; col++){
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	e080      	b.n	8000924 <Keypad_ScanKey+0x158>
				if (! (MCAL_GPIO_ReadPin(KEYPAD_PORT, Keypad_Col[col])))
 8000822:	4a4a      	ldr	r2, [pc, #296]	; (800094c <Keypad_ScanKey+0x180>)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082a:	b29b      	uxth	r3, r3
 800082c:	4619      	mov	r1, r3
 800082e:	4845      	ldr	r0, [pc, #276]	; (8000944 <Keypad_ScanKey+0x178>)
 8000830:	f7ff ff12 	bl	8000658 <MCAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d171      	bne.n	800091e <Keypad_ScanKey+0x152>
				{
					while(! (MCAL_GPIO_ReadPin(KEYPAD_PORT, Keypad_Col[col])));
 800083a:	bf00      	nop
 800083c:	4a43      	ldr	r2, [pc, #268]	; (800094c <Keypad_ScanKey+0x180>)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000844:	b29b      	uxth	r3, r3
 8000846:	4619      	mov	r1, r3
 8000848:	483e      	ldr	r0, [pc, #248]	; (8000944 <Keypad_ScanKey+0x178>)
 800084a:	f7ff ff05 	bl	8000658 <MCAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f3      	beq.n	800083c <Keypad_ScanKey+0x70>
					switch(row){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d861      	bhi.n	800091e <Keypad_ScanKey+0x152>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <Keypad_ScanKey+0x94>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	08000871 	.word	0x08000871
 8000864:	08000899 	.word	0x08000899
 8000868:	080008c1 	.word	0x080008c1
 800086c:	080008e9 	.word	0x080008e9
						case (0):
							if (col == 0)      return '7';
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <Keypad_ScanKey+0xae>
 8000876:	2337      	movs	r3, #55	; 0x37
 8000878:	e060      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 1) return '8';
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d101      	bne.n	8000884 <Keypad_ScanKey+0xb8>
 8000880:	2338      	movs	r3, #56	; 0x38
 8000882:	e05b      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 2) return '9';
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d101      	bne.n	800088e <Keypad_ScanKey+0xc2>
 800088a:	2339      	movs	r3, #57	; 0x39
 800088c:	e056      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 3) return '/';
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2b03      	cmp	r3, #3
 8000892:	d13d      	bne.n	8000910 <Keypad_ScanKey+0x144>
 8000894:	232f      	movs	r3, #47	; 0x2f
 8000896:	e051      	b.n	800093c <Keypad_ScanKey+0x170>
							break;
						case (1):
							if (col == 0)      return '4';
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <Keypad_ScanKey+0xd6>
 800089e:	2334      	movs	r3, #52	; 0x34
 80008a0:	e04c      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 1) return '5';
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d101      	bne.n	80008ac <Keypad_ScanKey+0xe0>
 80008a8:	2335      	movs	r3, #53	; 0x35
 80008aa:	e047      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 2) return '6';
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d101      	bne.n	80008b6 <Keypad_ScanKey+0xea>
 80008b2:	2336      	movs	r3, #54	; 0x36
 80008b4:	e042      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 3) return '*';
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d12b      	bne.n	8000914 <Keypad_ScanKey+0x148>
 80008bc:	232a      	movs	r3, #42	; 0x2a
 80008be:	e03d      	b.n	800093c <Keypad_ScanKey+0x170>
							break;
						case (2):
							if (col == 0)      return '1';
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d101      	bne.n	80008ca <Keypad_ScanKey+0xfe>
 80008c6:	2331      	movs	r3, #49	; 0x31
 80008c8:	e038      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 1) return '2';
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d101      	bne.n	80008d4 <Keypad_ScanKey+0x108>
 80008d0:	2332      	movs	r3, #50	; 0x32
 80008d2:	e033      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 2) return '3';
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d101      	bne.n	80008de <Keypad_ScanKey+0x112>
 80008da:	2333      	movs	r3, #51	; 0x33
 80008dc:	e02e      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 3) return '-';
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d119      	bne.n	8000918 <Keypad_ScanKey+0x14c>
 80008e4:	232d      	movs	r3, #45	; 0x2d
 80008e6:	e029      	b.n	800093c <Keypad_ScanKey+0x170>
							break;
						case (3):
							if (col == 0) 	   return 'c';
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d101      	bne.n	80008f2 <Keypad_ScanKey+0x126>
 80008ee:	2363      	movs	r3, #99	; 0x63
 80008f0:	e024      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 1) return '0';
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d101      	bne.n	80008fc <Keypad_ScanKey+0x130>
 80008f8:	2330      	movs	r3, #48	; 0x30
 80008fa:	e01f      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 2) return '=';
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d101      	bne.n	8000906 <Keypad_ScanKey+0x13a>
 8000902:	233d      	movs	r3, #61	; 0x3d
 8000904:	e01a      	b.n	800093c <Keypad_ScanKey+0x170>
							else if (col == 3) return '+';
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d107      	bne.n	800091c <Keypad_ScanKey+0x150>
 800090c:	232b      	movs	r3, #43	; 0x2b
 800090e:	e015      	b.n	800093c <Keypad_ScanKey+0x170>
							break;
 8000910:	bf00      	nop
 8000912:	e004      	b.n	800091e <Keypad_ScanKey+0x152>
							break;
 8000914:	bf00      	nop
 8000916:	e002      	b.n	800091e <Keypad_ScanKey+0x152>
							break;
 8000918:	bf00      	nop
 800091a:	e000      	b.n	800091e <Keypad_ScanKey+0x152>
							break;
 800091c:	bf00      	nop
			for(col = 0;col < 4; col++){
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2b03      	cmp	r3, #3
 8000928:	f67f af7b 	bls.w	8000822 <Keypad_ScanKey+0x56>
		for (row = 0;row < 4; row++)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3301      	adds	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b03      	cmp	r3, #3
 8000936:	f67f af53 	bls.w	80007e0 <Keypad_ScanKey+0x14>
					}
				}
			}
		}
	return 'A';
 800093a:	2341      	movs	r3, #65	; 0x41
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40010c00 	.word	0x40010c00
 8000948:	20000000 	.word	0x20000000
 800094c:	20000010 	.word	0x20000010

08000950 <wait_ms>:
#include <lcd_driver.h>

GPIO_PConfig_t PinCfg ;

void wait_ms(uint32_t time)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	int i , j;
	for(i=0 ; i<time ; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e00b      	b.n	8000976 <wait_ms+0x26>
		for(j=0 ; j<255 ; j++);
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	e002      	b.n	800096a <wait_ms+0x1a>
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	3301      	adds	r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	2bfe      	cmp	r3, #254	; 0xfe
 800096e:	ddf9      	ble.n	8000964 <wait_ms+0x14>
	for(i=0 ; i<time ; i++)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	429a      	cmp	r2, r3
 800097c:	d8ef      	bhi.n	800095e <wait_ms+0xe>
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <LCD_GPIO_init>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);


}

void LCD_GPIO_init() {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

	PinCfg.GPIO_PinNumber=EN_SWITCH;
 800098c:	4b52      	ldr	r3, [pc, #328]	; (8000ad8 <LCD_GPIO_init+0x150>)
 800098e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000992:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000994:	4b50      	ldr	r3, [pc, #320]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000996:	2204      	movs	r2, #4
 8000998:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 800099a:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <LCD_GPIO_init+0x150>)
 800099c:	2201      	movs	r2, #1
 800099e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80009a0:	494d      	ldr	r1, [pc, #308]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009a2:	484e      	ldr	r0, [pc, #312]	; (8000adc <LCD_GPIO_init+0x154>)
 80009a4:	f7ff fdd9 	bl	800055a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=RS_SWITCH;
 80009a8:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ae:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80009b0:	4b49      	ldr	r3, [pc, #292]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80009b6:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80009bc:	4946      	ldr	r1, [pc, #280]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009be:	4847      	ldr	r0, [pc, #284]	; (8000adc <LCD_GPIO_init+0x154>)
 80009c0:	f7ff fdcb 	bl	800055a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=RW_SWITCH;
 80009c4:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ca:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80009cc:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80009d8:	493f      	ldr	r1, [pc, #252]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009da:	4840      	ldr	r0, [pc, #256]	; (8000adc <LCD_GPIO_init+0x154>)
 80009dc:	f7ff fdbd 	bl	800055a <MCAL_GPIO_Init>

	// SET 8 PINS AS OUTPUT
	PinCfg.GPIO_PinNumber=GPIO_PIN_0;
 80009e0:	4b3d      	ldr	r3, [pc, #244]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80009e6:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80009ec:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80009f2:	4939      	ldr	r1, [pc, #228]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009f4:	4839      	ldr	r0, [pc, #228]	; (8000adc <LCD_GPIO_init+0x154>)
 80009f6:	f7ff fdb0 	bl	800055a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=GPIO_PIN_1;
 80009fa:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <LCD_GPIO_init+0x150>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000a00:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a06:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000a0c:	4932      	ldr	r1, [pc, #200]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a0e:	4833      	ldr	r0, [pc, #204]	; (8000adc <LCD_GPIO_init+0x154>)
 8000a10:	f7ff fda3 	bl	800055a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=GPIO_PIN_2;
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000a26:	492c      	ldr	r1, [pc, #176]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a28:	482c      	ldr	r0, [pc, #176]	; (8000adc <LCD_GPIO_init+0x154>)
 8000a2a:	f7ff fd96 	bl	800055a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=GPIO_PIN_3;
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a30:	2208      	movs	r2, #8
 8000a32:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000a40:	4925      	ldr	r1, [pc, #148]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a42:	4826      	ldr	r0, [pc, #152]	; (8000adc <LCD_GPIO_init+0x154>)
 8000a44:	f7ff fd89 	bl	800055a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=GPIO_PIN_4;
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a54:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000a5a:	491f      	ldr	r1, [pc, #124]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a5c:	481f      	ldr	r0, [pc, #124]	; (8000adc <LCD_GPIO_init+0x154>)
 8000a5e:	f7ff fd7c 	bl	800055a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=GPIO_PIN_5;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a64:	2220      	movs	r2, #32
 8000a66:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000a74:	4918      	ldr	r1, [pc, #96]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a76:	4819      	ldr	r0, [pc, #100]	; (8000adc <LCD_GPIO_init+0x154>)
 8000a78:	f7ff fd6f 	bl	800055a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=GPIO_PIN_6;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a7e:	2240      	movs	r2, #64	; 0x40
 8000a80:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000a8e:	4912      	ldr	r1, [pc, #72]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <LCD_GPIO_init+0x154>)
 8000a92:	f7ff fd62 	bl	800055a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=GPIO_PIN_7;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000aa8:	490b      	ldr	r1, [pc, #44]	; (8000ad8 <LCD_GPIO_init+0x150>)
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <LCD_GPIO_init+0x154>)
 8000aac:	f7ff fd55 	bl	800055a <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <LCD_GPIO_init+0x154>)
 8000ab8:	f7ff fde5 	bl	8000686 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <LCD_GPIO_init+0x154>)
 8000ac4:	f7ff fddf 	bl	8000686 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <LCD_GPIO_init+0x154>)
 8000ad0:	f7ff fdd9 	bl	8000686 <MCAL_GPIO_WritePin>

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000078 	.word	0x20000078
 8000adc:	40010800 	.word	0x40010800

08000ae0 <LCD_INIT>:

void LCD_INIT()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	wait_ms(20);
 8000ae4:	2014      	movs	r0, #20
 8000ae6:	f7ff ff33 	bl	8000950 <wait_ms>
	LCD_GPIO_init();
 8000aea:	f7ff ff4d 	bl	8000988 <LCD_GPIO_init>
	wait_ms(15);
 8000aee:	200f      	movs	r0, #15
 8000af0:	f7ff ff2e 	bl	8000950 <wait_ms>
	LCD_clear_screen();
 8000af4:	f000 f894 	bl	8000c20 <LCD_clear_screen>

	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000af8:	2038      	movs	r0, #56	; 0x38
 8000afa:	f000 f80b 	bl	8000b14 <LCD_WRITE_COMMAND>
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0X02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000afe:	2006      	movs	r0, #6
 8000b00:	f000 f808 	bl	8000b14 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000b04:	2080      	movs	r0, #128	; 0x80
 8000b06:	f000 f805 	bl	8000b14 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f802 	bl	8000b14 <LCD_WRITE_COMMAND>
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LCD_WRITE_COMMAND>:
void LCD_WRITE_COMMAND(unsigned char command)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]

	#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_PORT, command);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4619      	mov	r1, r3
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <LCD_WRITE_COMMAND+0x40>)
 8000b26:	f7ff fdcc 	bl	80006c2 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <LCD_WRITE_COMMAND+0x40>)
 8000b32:	f7ff fda8 	bl	8000686 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <LCD_WRITE_COMMAND+0x40>)
 8000b3e:	f7ff fda2 	bl	8000686 <MCAL_GPIO_WritePin>
	wait_ms(1);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff ff04 	bl	8000950 <wait_ms>
	LCD_kick();
 8000b48:	f000 f854 	bl	8000bf4 <LCD_kick>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	wait_ms(1);
	LCD_kick();
	#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010800 	.word	0x40010800

08000b58 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char character)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]

	#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_PORT, character);
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <LCD_WRITE_CHAR+0x40>)
 8000b6a:	f7ff fdaa 	bl	80006c2 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <LCD_WRITE_CHAR+0x40>)
 8000b76:	f7ff fd86 	bl	8000686 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <LCD_WRITE_CHAR+0x40>)
 8000b82:	f7ff fd80 	bl	8000686 <MCAL_GPIO_WritePin>
	wait_ms(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff fee2 	bl	8000950 <wait_ms>
	LCD_kick();
 8000b8c:	f000 f832 	bl	8000bf4 <LCD_kick>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	wait_ms(1);
	LCD_kick();

	#endif
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40010800 	.word	0x40010800

08000b9c <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(char* string)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	uint32_t count=0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
	while (*string != '\0')
 8000ba8:	e01c      	b.n	8000be4 <LCD_WRITE_STRING+0x48>
	{
		LCD_WRITE_CHAR(*string++);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ffd0 	bl	8000b58 <LCD_WRITE_CHAR>
		count++;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
		if(count == 16)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b10      	cmp	r3, #16
 8000bc2:	d104      	bne.n	8000bce <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f000 f831 	bl	8000c2e <LCD_GOTO_XY>
 8000bcc:	e00a      	b.n	8000be4 <LCD_WRITE_STRING+0x48>
		}
		else if(count == 32)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b20      	cmp	r3, #32
 8000bd2:	d107      	bne.n	8000be4 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 8000bd4:	f000 f824 	bl	8000c20 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 f827 	bl	8000c2e <LCD_GOTO_XY>
			count=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
	while (*string != '\0')
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1de      	bne.n	8000baa <LCD_WRITE_STRING+0xe>
		}
	}


}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <LCD_kick>:
void LCD_kick(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfe:	4807      	ldr	r0, [pc, #28]	; (8000c1c <LCD_kick+0x28>)
 8000c00:	f7ff fd41 	bl	8000686 <MCAL_GPIO_WritePin>
	wait_ms(50);
 8000c04:	2032      	movs	r0, #50	; 0x32
 8000c06:	f7ff fea3 	bl	8000950 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <LCD_kick+0x28>)
 8000c12:	f7ff fd38 	bl	8000686 <MCAL_GPIO_WritePin>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40010800 	.word	0x40010800

08000c20 <LCD_clear_screen>:
void LCD_clear_screen()
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff ff75 	bl	8000b14 <LCD_WRITE_COMMAND>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <LCD_GOTO_XY>:
void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	460a      	mov	r2, r1
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71bb      	strb	r3, [r7, #6]
	if(line==1)
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d10c      	bne.n	8000c5e <LCD_GOTO_XY+0x30>
	{
		if(position<16 && position>0)
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d818      	bhi.n	8000c7c <LCD_GOTO_XY+0x4e>
 8000c4a:	79bb      	ldrb	r3, [r7, #6]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d015      	beq.n	8000c7c <LCD_GOTO_XY+0x4e>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	3b80      	subs	r3, #128	; 0x80
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff5c 	bl	8000b14 <LCD_WRITE_COMMAND>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
		}

	}
}
 8000c5c:	e00e      	b.n	8000c7c <LCD_GOTO_XY+0x4e>
	else if(line==2)
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d10b      	bne.n	8000c7c <LCD_GOTO_XY+0x4e>
		if(position<16 && position>0)
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	d808      	bhi.n	8000c7c <LCD_GOTO_XY+0x4e>
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <LCD_GOTO_XY+0x4e>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	3b40      	subs	r3, #64	; 0x40
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff4c 	bl	8000b14 <LCD_WRITE_COMMAND>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <__libc_init_array>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	2500      	movs	r5, #0
 8000c88:	4e0c      	ldr	r6, [pc, #48]	; (8000cbc <__libc_init_array+0x38>)
 8000c8a:	4c0d      	ldr	r4, [pc, #52]	; (8000cc0 <__libc_init_array+0x3c>)
 8000c8c:	1ba4      	subs	r4, r4, r6
 8000c8e:	10a4      	asrs	r4, r4, #2
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	d109      	bne.n	8000ca8 <__libc_init_array+0x24>
 8000c94:	f000 f81a 	bl	8000ccc <_init>
 8000c98:	2500      	movs	r5, #0
 8000c9a:	4e0a      	ldr	r6, [pc, #40]	; (8000cc4 <__libc_init_array+0x40>)
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	; (8000cc8 <__libc_init_array+0x44>)
 8000c9e:	1ba4      	subs	r4, r4, r6
 8000ca0:	10a4      	asrs	r4, r4, #2
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d105      	bne.n	8000cb2 <__libc_init_array+0x2e>
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cac:	4798      	blx	r3
 8000cae:	3501      	adds	r5, #1
 8000cb0:	e7ee      	b.n	8000c90 <__libc_init_array+0xc>
 8000cb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cb6:	4798      	blx	r3
 8000cb8:	3501      	adds	r5, #1
 8000cba:	e7f2      	b.n	8000ca2 <__libc_init_array+0x1e>
 8000cbc:	08000cf0 	.word	0x08000cf0
 8000cc0:	08000cf0 	.word	0x08000cf0
 8000cc4:	08000cf0 	.word	0x08000cf0
 8000cc8:	08000cf4 	.word	0x08000cf4

08000ccc <_init>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr

08000cd8 <_fini>:
 8000cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cda:	bf00      	nop
 8000cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cde:	bc08      	pop	{r3}
 8000ce0:	469e      	mov	lr, r3
 8000ce2:	4770      	bx	lr
