
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000650  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000780  08000788  00010788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000780  08000780  00010788  2**0
                  CONTENTS
  4 .ARM          00000000  08000780  08000780  00010788  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000780  08000788  00010788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000780  08000780  00010780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000784  08000784  00010784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  08000788  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000788  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010788  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026da  00000000  00000000  000107b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005ee  00000000  00000000  00012e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000076c  00000000  00000000  00013479  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000140  00000000  00000000  00013be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00013d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000205c  00000000  00000000  00013e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000013e3  00000000  00000000  00015e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009087  00000000  00000000  0001726f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000202f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003ec  00000000  00000000  00020374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000768 	.word	0x08000768

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000768 	.word	0x08000768

08000170 <clock_init>:
#include "Stm32_F103C6_EXTI_driver.h"



void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// TO ENABLE CLOCK SIGNAL FOR GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	// TO ENABLE CLOCK SIGNAL FOR GPIOB
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:
void GPIO_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0

	//PA1 input HighZ
	GPIO_PConfig_t PinConfig;
	PinConfig.GPIO_PinNumber=GPIO_PIN_1;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE= GPIO_MODE_INPUT_FLO;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinConfig);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <GPIO_init+0x64>)
 80001ac:	f000 fa11 	bl	80005d2 <MCAL_GPIO_Init>

	//PA13 input HighZ
	PinConfig.GPIO_PinNumber=GPIO_PIN_13;
 80001b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001b4:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE= GPIO_MODE_INPUT_FLO;
 80001b6:	2301      	movs	r3, #1
 80001b8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinConfig);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	480f      	ldr	r0, [pc, #60]	; (80001fc <GPIO_init+0x64>)
 80001c0:	f000 fa07 	bl	80005d2 <MCAL_GPIO_Init>

	//PB1 output push pull mode
	PinConfig.GPIO_PinNumber=GPIO_PIN_1;
 80001c4:	2302      	movs	r3, #2
 80001c6:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE= GPIO_MODE_OUTPUT_PP;
 80001c8:	2304      	movs	r3, #4
 80001ca:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	480a      	ldr	r0, [pc, #40]	; (8000200 <GPIO_init+0x68>)
 80001d6:	f000 f9fc 	bl	80005d2 <MCAL_GPIO_Init>

	//PB13 output push pull mode
	PinConfig.GPIO_PinNumber=GPIO_PIN_13;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE= GPIO_MODE_OUTPUT_PP;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_SPeed=GPIO_OutputSpeed_10M;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <GPIO_init+0x68>)
 80001ee:	f000 f9f0 	bl	80005d2 <MCAL_GPIO_Init>

}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <wait>:

void wait(int x)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	unsigned int i , j;
	for(i=0 ; i<x ; i++)
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e00b      	b.n	800022a <wait+0x26>
		for(j=0 ; j<255 ; j++);
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e002      	b.n	800021e <wait+0x1a>
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	3301      	adds	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	2bfe      	cmp	r3, #254	; 0xfe
 8000222:	d9f9      	bls.n	8000218 <wait+0x14>
	for(i=0 ; i<x ; i++)
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	429a      	cmp	r2, r3
 8000230:	d3ef      	bcc.n	8000212 <wait+0xe>
}
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <main>:

int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	clock_init();
 8000240:	f7ff ff96 	bl	8000170 <clock_init>
	GPIO_init();
 8000244:	f7ff ffa8 	bl	8000198 <GPIO_init>


	while(1)
	{
		//PA1 > connected to external PUR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 ) //press
 8000248:	2102      	movs	r1, #2
 800024a:	4811      	ldr	r0, [pc, #68]	; (8000290 <main+0x54>)
 800024c:	f000 fa40 	bl	80006d0 <MCAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d10b      	bne.n	800026e <main+0x32>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000256:	2102      	movs	r1, #2
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <main+0x58>)
 800025a:	f000 fa50 	bl	80006fe <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 ); //Single press
 800025e:	bf00      	nop
 8000260:	2102      	movs	r1, #2
 8000262:	480b      	ldr	r0, [pc, #44]	; (8000290 <main+0x54>)
 8000264:	f000 fa34 	bl	80006d0 <MCAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f8      	beq.n	8000260 <main+0x24>
		}

		//PA13 > connected to external PDR
		if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1) // Multi pressing
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <main+0x54>)
 8000274:	f000 fa2c 	bl	80006d0 <MCAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	2b01      	cmp	r3, #1
 800027c:	d104      	bne.n	8000288 <main+0x4c>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800027e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000282:	4804      	ldr	r0, [pc, #16]	; (8000294 <main+0x58>)
 8000284:	f000 fa3b 	bl	80006fe <MCAL_GPIO_TogglePin>

		}

		wait(1);
 8000288:	2001      	movs	r0, #1
 800028a:	f7ff ffbb 	bl	8000204 <wait>
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 ) //press
 800028e:	e7db      	b.n	8000248 <main+0xc>
 8000290:	40010800 	.word	0x40010800
 8000294:	40010c00 	.word	0x40010c00

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	; (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 fa2b 	bl	8000720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ffb7 	bl	800023c <main>

080002ce <LoopForever>:

LoopForever:
    b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	08000788 	.word	0x08000788
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	20000058 	.word	0x20000058

080002e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC1_2_IRQHandler>
	...

080002ec <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <EXTI0_IRQHandler+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <EXTI0_IRQHandler+0x1c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <EXTI0_IRQHandler+0x20>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4798      	blx	r3
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010400 	.word	0x40010400
 800030c:	2000001c 	.word	0x2000001c

08000310 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI1_IRQHandler+0x1c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <EXTI1_IRQHandler+0x1c>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <EXTI1_IRQHandler+0x20>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010400 	.word	0x40010400
 8000330:	2000001c 	.word	0x2000001c

08000334 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <EXTI2_IRQHandler+0x1c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <EXTI2_IRQHandler+0x1c>)
 800033e:	f043 0304 	orr.w	r3, r3, #4
 8000342:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <EXTI2_IRQHandler+0x20>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4798      	blx	r3
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010400 	.word	0x40010400
 8000354:	2000001c 	.word	0x2000001c

08000358 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 800035c:	4b05      	ldr	r3, [pc, #20]	; (8000374 <EXTI3_IRQHandler+0x1c>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <EXTI3_IRQHandler+0x1c>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <EXTI3_IRQHandler+0x20>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4798      	blx	r3
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40010400 	.word	0x40010400
 8000378:	2000001c 	.word	0x2000001c

0800037c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <EXTI4_IRQHandler+0x1c>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <EXTI4_IRQHandler+0x1c>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <EXTI4_IRQHandler+0x20>)
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	4798      	blx	r3
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40010400 	.word	0x40010400
 800039c:	2000001c 	.word	0x2000001c

080003a0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 80003a4:	4b26      	ldr	r3, [pc, #152]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f003 0320 	and.w	r3, r3, #32
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d008      	beq.n	80003c2 <EXTI9_5_IRQHandler+0x22>
 80003b0:	4b23      	ldr	r3, [pc, #140]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a22      	ldr	r2, [pc, #136]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6153      	str	r3, [r2, #20]
 80003bc:	4b21      	ldr	r3, [pc, #132]	; (8000444 <EXTI9_5_IRQHandler+0xa4>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d008      	beq.n	80003e0 <EXTI9_5_IRQHandler+0x40>
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 80003d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <EXTI9_5_IRQHandler+0xa4>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d008      	beq.n	80003fe <EXTI9_5_IRQHandler+0x5e>
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a13      	ldr	r2, [pc, #76]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 80003f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f6:	6153      	str	r3, [r2, #20]
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <EXTI9_5_IRQHandler+0xa4>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000406:	2b00      	cmp	r3, #0
 8000408:	d008      	beq.n	800041c <EXTI9_5_IRQHandler+0x7c>
 800040a:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 8000410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <EXTI9_5_IRQHandler+0xa4>)
 8000418:	6a1b      	ldr	r3, [r3, #32]
 800041a:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000424:	2b00      	cmp	r3, #0
 8000426:	d008      	beq.n	800043a <EXTI9_5_IRQHandler+0x9a>
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <EXTI9_5_IRQHandler+0xa0>)
 800042e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000432:	6153      	str	r3, [r2, #20]
 8000434:	4b03      	ldr	r3, [pc, #12]	; (8000444 <EXTI9_5_IRQHandler+0xa4>)
 8000436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000438:	4798      	blx	r3

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010400 	.word	0x40010400
 8000444:	2000001c 	.word	0x2000001c

08000448 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 800044c:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000454:	2b00      	cmp	r3, #0
 8000456:	d008      	beq.n	800046a <EXTI15_10_IRQHandler+0x22>
 8000458:	4b2a      	ldr	r3, [pc, #168]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a29      	ldr	r2, [pc, #164]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 800045e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000462:	6153      	str	r3, [r2, #20]
 8000464:	4b28      	ldr	r3, [pc, #160]	; (8000508 <EXTI15_10_IRQHandler+0xc0>)
 8000466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000468:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 800046a:	4b26      	ldr	r3, [pc, #152]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000472:	2b00      	cmp	r3, #0
 8000474:	d008      	beq.n	8000488 <EXTI15_10_IRQHandler+0x40>
 8000476:	4b23      	ldr	r3, [pc, #140]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a22      	ldr	r2, [pc, #136]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 800047c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b21      	ldr	r3, [pc, #132]	; (8000508 <EXTI15_10_IRQHandler+0xc0>)
 8000484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000486:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000490:	2b00      	cmp	r3, #0
 8000492:	d008      	beq.n	80004a6 <EXTI15_10_IRQHandler+0x5e>
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	4a1a      	ldr	r2, [pc, #104]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 800049a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800049e:	6153      	str	r3, [r2, #20]
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <EXTI15_10_IRQHandler+0xc0>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d008      	beq.n	80004c4 <EXTI15_10_IRQHandler+0x7c>
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a13      	ldr	r2, [pc, #76]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 80004b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <EXTI15_10_IRQHandler+0xc0>)
 80004c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c2:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d008      	beq.n	80004e2 <EXTI15_10_IRQHandler+0x9a>
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 80004d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004da:	6153      	str	r3, [r2, #20]
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <EXTI15_10_IRQHandler+0xc0>)
 80004de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004e0:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d008      	beq.n	8000500 <EXTI15_10_IRQHandler+0xb8>
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI15_10_IRQHandler+0xbc>)
 80004f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <EXTI15_10_IRQHandler+0xc0>)
 80004fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004fe:	4798      	blx	r3

}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40010400 	.word	0x40010400
 8000508:	2000001c 	.word	0x2000001c

0800050c <Get_CRLH_Position>:
 *      Author: ahmed osama
 */
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	2b80      	cmp	r3, #128	; 0x80
 800051a:	d042      	beq.n	80005a2 <Get_CRLH_Position+0x96>
 800051c:	2b80      	cmp	r3, #128	; 0x80
 800051e:	dc11      	bgt.n	8000544 <Get_CRLH_Position+0x38>
 8000520:	2b08      	cmp	r3, #8
 8000522:	d036      	beq.n	8000592 <Get_CRLH_Position+0x86>
 8000524:	2b08      	cmp	r3, #8
 8000526:	dc06      	bgt.n	8000536 <Get_CRLH_Position+0x2a>
 8000528:	2b02      	cmp	r3, #2
 800052a:	d02e      	beq.n	800058a <Get_CRLH_Position+0x7e>
 800052c:	2b04      	cmp	r3, #4
 800052e:	d02e      	beq.n	800058e <Get_CRLH_Position+0x82>
 8000530:	2b01      	cmp	r3, #1
 8000532:	d028      	beq.n	8000586 <Get_CRLH_Position+0x7a>
 8000534:	e047      	b.n	80005c6 <Get_CRLH_Position+0xba>
 8000536:	2b20      	cmp	r3, #32
 8000538:	d02f      	beq.n	800059a <Get_CRLH_Position+0x8e>
 800053a:	2b40      	cmp	r3, #64	; 0x40
 800053c:	d02f      	beq.n	800059e <Get_CRLH_Position+0x92>
 800053e:	2b10      	cmp	r3, #16
 8000540:	d029      	beq.n	8000596 <Get_CRLH_Position+0x8a>
 8000542:	e040      	b.n	80005c6 <Get_CRLH_Position+0xba>
 8000544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000548:	d033      	beq.n	80005b2 <Get_CRLH_Position+0xa6>
 800054a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800054e:	dc09      	bgt.n	8000564 <Get_CRLH_Position+0x58>
 8000550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000554:	d029      	beq.n	80005aa <Get_CRLH_Position+0x9e>
 8000556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800055a:	d028      	beq.n	80005ae <Get_CRLH_Position+0xa2>
 800055c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000560:	d021      	beq.n	80005a6 <Get_CRLH_Position+0x9a>
 8000562:	e030      	b.n	80005c6 <Get_CRLH_Position+0xba>
 8000564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000568:	d027      	beq.n	80005ba <Get_CRLH_Position+0xae>
 800056a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800056e:	dc03      	bgt.n	8000578 <Get_CRLH_Position+0x6c>
 8000570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000574:	d01f      	beq.n	80005b6 <Get_CRLH_Position+0xaa>
 8000576:	e026      	b.n	80005c6 <Get_CRLH_Position+0xba>
 8000578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800057c:	d01f      	beq.n	80005be <Get_CRLH_Position+0xb2>
 800057e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000582:	d01e      	beq.n	80005c2 <Get_CRLH_Position+0xb6>
 8000584:	e01f      	b.n	80005c6 <Get_CRLH_Position+0xba>
	{
		case GPIO_PIN_0 : return 0;  break;
 8000586:	2300      	movs	r3, #0
 8000588:	e01e      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_1 : return 4;  break;
 800058a:	2304      	movs	r3, #4
 800058c:	e01c      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_2 : return 8;  break;
 800058e:	2308      	movs	r3, #8
 8000590:	e01a      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_3 : return 12; break;
 8000592:	230c      	movs	r3, #12
 8000594:	e018      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_4 : return 16; break;
 8000596:	2310      	movs	r3, #16
 8000598:	e016      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_5 : return 20; break;
 800059a:	2314      	movs	r3, #20
 800059c:	e014      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_6 : return 24; break;
 800059e:	2318      	movs	r3, #24
 80005a0:	e012      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_7 : return 28; break;
 80005a2:	231c      	movs	r3, #28
 80005a4:	e010      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_8 : return 0;  break;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e00e      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_9 : return 4;  break;
 80005aa:	2304      	movs	r3, #4
 80005ac:	e00c      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_10: return 8;  break;
 80005ae:	2308      	movs	r3, #8
 80005b0:	e00a      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_11: return 12; break;
 80005b2:	230c      	movs	r3, #12
 80005b4:	e008      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_12: return 16; break;
 80005b6:	2310      	movs	r3, #16
 80005b8:	e006      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_13: return 20; break;
 80005ba:	2314      	movs	r3, #20
 80005bc:	e004      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_14: return 24; break;
 80005be:	2318      	movs	r3, #24
 80005c0:	e002      	b.n	80005c8 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_15: return 28; break;
 80005c2:	231c      	movs	r3, #28
 80005c4:	e000      	b.n	80005c8 <Get_CRLH_Position+0xbc>
	}
	return 0;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <MCAL_GPIO_Init>:

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PConfig_t* PinConfig)
{
 80005d2:	b590      	push	{r4, r7, lr}
 80005d4:	b085      	sub	sp, #20
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
	uint8_t PIN_Config=0;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 to 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 to 15
	volatile uint32_t* Config_Register=NULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
	Config_Register= (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	2bff      	cmp	r3, #255	; 0xff
 80005ea:	d801      	bhi.n	80005f0 <MCAL_GPIO_Init+0x1e>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	e001      	b.n	80005f4 <MCAL_GPIO_Init+0x22>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3304      	adds	r3, #4
 80005f4:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[0:0]
	*(Config_Register) &= ~ (0xf<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff86 	bl	800050c <Get_CRLH_Position>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	230f      	movs	r3, #15
 8000606:	4093      	lsls	r3, r2
 8000608:	43da      	mvns	r2, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	401a      	ands	r2, r3
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	601a      	str	r2, [r3, #0]

	//if pin is output
	if(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD ||  PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD  )
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	2b04      	cmp	r3, #4
 800061a:	d00b      	beq.n	8000634 <MCAL_GPIO_Init+0x62>
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	2b05      	cmp	r3, #5
 8000622:	d007      	beq.n	8000634 <MCAL_GPIO_Init+0x62>
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	2b06      	cmp	r3, #6
 800062a:	d003      	beq.n	8000634 <MCAL_GPIO_Init+0x62>
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	789b      	ldrb	r3, [r3, #2]
 8000630:	2b07      	cmp	r3, #7
 8000632:	d10e      	bne.n	8000652 <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1:0]
		PIN_Config =( (((PinConfig->GPIO_MODE - 4) << 2 )| (PinConfig->GPIO_Output_SPeed)) & 0x0F);
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	3b04      	subs	r3, #4
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	b25a      	sxtb	r2, r3
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	78db      	ldrb	r3, [r3, #3]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b25b      	sxtb	r3, r3
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e02c      	b.n	80006ac <MCAL_GPIO_Init+0xda>
	}

	//if pin is input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE==GPIO_MODE_Analog || PinConfig->GPIO_MODE==GPIO_MODE_INPUT_FLO)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d003      	beq.n	8000662 <MCAL_GPIO_Init+0x90>
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	789b      	ldrb	r3, [r3, #2]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d107      	bne.n	8000672 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2 )| 0x0) & 0x0F);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	789b      	ldrb	r3, [r3, #2]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e01c      	b.n	80006ac <MCAL_GPIO_Init+0xda>

		}
		else if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_AF)                   //consider it input floating
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	2b08      	cmp	r3, #8
 8000678:	d102      	bne.n	8000680 <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_FLO) << 2 )| (0x0)) & 0x0F);
 800067a:	2304      	movs	r3, #4
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	e015      	b.n	80006ac <MCAL_GPIO_Init+0xda>

		}
		else
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2 )| (0x0)) & 0x0F);
 8000680:	2308      	movs	r3, #8
 8000682:	73fb      	strb	r3, [r7, #15]
			//PD or PP
			if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_PU)
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	789b      	ldrb	r3, [r3, #2]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d107      	bne.n	800069c <MCAL_GPIO_Init+0xca>
			{
				//in Table 20. port bit configuration table set PxODR 1 for input pull_up
				GPIOx->ODR |=  PinConfig->GPIO_PinNumber;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	8812      	ldrh	r2, [r2, #0]
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	e007      	b.n	80006ac <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//in Table 20. port bit configuration table set PxODR 0 for input pull_down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	8812      	ldrh	r2, [r2, #0]
 80006a4:	43d2      	mvns	r2, r2
 80006a6:	401a      	ands	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	*(Config_Register) |= PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 80006ac:	7bfc      	ldrb	r4, [r7, #15]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff2a 	bl	800050c <Get_CRLH_Position>
 80006b8:	4603      	mov	r3, r0
 80006ba:	fa04 f203 	lsl.w	r2, r4, r3
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	431a      	orrs	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	601a      	str	r2, [r3, #0]

}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}

080006d0 <MCAL_GPIO_ReadPin>:
		RCC->APB2RSTR &= ~ (1<<6);
	}

}
uint8_t MCAL_GPIO_ReadPin  (GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if( (GPIOx->IDR & PinNumber) != (uint32_t) GPIO_PIN_RESET)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	887b      	ldrh	r3, [r7, #2]
 80006e2:	4013      	ands	r3, r2
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_SET;
 80006e8:	2301      	movs	r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e001      	b.n	80006f2 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitStatus = GPIO_PIN_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <MCAL_GPIO_TogglePin>:
void MCAL_GPIO_WritePort  (GPIO_TypeDef *GPIOx, uint16_t value)
{
	GPIOx->ODR= (uint32_t)value;
}
void MCAL_GPIO_TogglePin  (GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= PinNumber;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68da      	ldr	r2, [r3, #12]
 800070e:	887b      	ldrh	r3, [r7, #2]
 8000710:	405a      	eors	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	60da      	str	r2, [r3, #12]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <__libc_init_array>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	2500      	movs	r5, #0
 8000724:	4e0c      	ldr	r6, [pc, #48]	; (8000758 <__libc_init_array+0x38>)
 8000726:	4c0d      	ldr	r4, [pc, #52]	; (800075c <__libc_init_array+0x3c>)
 8000728:	1ba4      	subs	r4, r4, r6
 800072a:	10a4      	asrs	r4, r4, #2
 800072c:	42a5      	cmp	r5, r4
 800072e:	d109      	bne.n	8000744 <__libc_init_array+0x24>
 8000730:	f000 f81a 	bl	8000768 <_init>
 8000734:	2500      	movs	r5, #0
 8000736:	4e0a      	ldr	r6, [pc, #40]	; (8000760 <__libc_init_array+0x40>)
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <__libc_init_array+0x44>)
 800073a:	1ba4      	subs	r4, r4, r6
 800073c:	10a4      	asrs	r4, r4, #2
 800073e:	42a5      	cmp	r5, r4
 8000740:	d105      	bne.n	800074e <__libc_init_array+0x2e>
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000748:	4798      	blx	r3
 800074a:	3501      	adds	r5, #1
 800074c:	e7ee      	b.n	800072c <__libc_init_array+0xc>
 800074e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000752:	4798      	blx	r3
 8000754:	3501      	adds	r5, #1
 8000756:	e7f2      	b.n	800073e <__libc_init_array+0x1e>
 8000758:	08000780 	.word	0x08000780
 800075c:	08000780 	.word	0x08000780
 8000760:	08000780 	.word	0x08000780
 8000764:	08000784 	.word	0x08000784

08000768 <_init>:
 8000768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076a:	bf00      	nop
 800076c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800076e:	bc08      	pop	{r3}
 8000770:	469e      	mov	lr, r3
 8000772:	4770      	bx	lr

08000774 <_fini>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	bf00      	nop
 8000778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077a:	bc08      	pop	{r3}
 800077c:	469e      	mov	lr, r3
 800077e:	4770      	bx	lr
